#!/bin/sh

#
# (c) 2016-2024 Cezary Jackiewicz <cezary@eko.one.pl>
#

. /usr/share/libubox/jshn.sh

TIMEISVALID="false"
grep -q "time is valid" /tmp/state/dnsmasqsec 2>/dev/null && TIMEISVALID="true"
[ -e /dev/rtc0 ] && TIMEISVALID="true"

T=$(uci -q get network.loopback.device)
if [ "x$T" = "xlo" ]; then
	DEVICESECTION="true"
else
	DEVICESECTION="false"
fi

escapeJSON() {
	ret=$1
	ret="${ret//\\/\\\\}"
	ret="${ret//\"/\\\"}"
	echo "$ret"
}

escapeForSed() {
	ret=$1
	ret="$(escapeJSON "$ret")"
	ret="${ret//\\/\\\\}"
	ret="${ret//\//\\/}"
	echo "$ret"
}

simslot() {
	echo ',"simslot":{'
	case $(cat /tmp/sysinfo/board_name) in
		"teltonika,rut955"*)
			T=$(cat /sys/class/gpio/gpio503/value 2>/dev/null)
			[ -n "$T" ] && echo '"active":'$T',"slots":[{"index":1,"description":"SIM1","value":1},{"index":2,"description":"SIM2","value":0}]'
			;;
		"zbtlink,zbt-we826-e")
			T=$(cat /sys/class/gpio/gpio13/value 2>/dev/null)
			[ -n "$T" ] && echo '"active":'$T',"slots":[{"index":1,"description":"SIM1","value":0},{"index":2,"description":"SIM2","value":1}]'
			;;
		"zyxel,nr7101")
			if [ -e /usr/bin/sms_tool ]; then
				DEVICE=$(/usr/share/easyconfig/modem/detect.sh)
				if [ -n "$DEVICE" ]; then
					O=$(sms_tool -d $DEVICE at "AT+QUIMSLOT?")
					T=$(echo "$O" | awk -F [:] '/^\+QUIMSLOT/{print $2}' | xargs)
					[ -n "$T" ] && echo '"active":'$T',"slots":[{"index":1,"description":"SIM1","value":1},{"index":2,"description":"SIM2","value":2}]'
				fi
			fi
			;;
	esac
	echo '}'
}

wlancurrentchannels() {
	echo '"wlan_current_channels":['
	T=$(ubus call network.interface.lan status | jsonfilter -e @.l3_device)
	if [ -e /sys/class/net/$T/bridge ]; then
		for I in /sys/class/net/$T/lower_*; do
			if [ -e $I/phy80211 ]; then
				iw dev ${I##*lower_} info 2>/dev/null | \
					awk -v PHY=$(cat $I/phy80211/name) '/channel/{
					if($9 >= 5955){printf "{\"phy\":\"%s\",\"channel\":%d,\"min\":%d,\"max\":%d, \"freq\":%d},\n", PHY, $2, ($9-$6/2-5955)/5+1, ($9+$6/2-5955)/5+1, $9}else
					if($9 >= 5160){printf "{\"phy\":\"%s\",\"channel\":%d,\"min\":%d,\"max\":%d, \"freq\":%d},\n", PHY, $2, ($9-$6/2-5160)/5+32, ($9+$6/2-5160)/5+32, $9}else
					{printf "{\"phy\":\"%s\",\"channel\":%d,\"min\":%d,\"max\":%d, \"freq\":%d},\n", PHY, $2, ($9-$6/2-2412)/5+1, ($9+$6/2-2412)/5+1, $9}
					}'
			fi
		done
	fi
	echo '],'
}

show_status() {
SYSTEM_UPTIME=$(awk '{printf "%d\n", $1}' /proc/uptime)
if $TIMEISVALID; then
	SYSTEM_UPTIME_SINCE=$(date "+%Y%m%d%H%M" -d "@$(($(date +%s) - SYSTEM_UPTIME))")
	SYSTEM_TIME=$(date "+%Y%m%d%H%M")
fi

SYSTEM_LOAD=$(awk '{printf "%s %s %s\n", $1, $2, $3}' /proc/loadavg)

json_load "$(ubus call network.interface.wan status)"
json_get_var WAN_UPTIME uptime
json_get_var IFNAME l3_device

. /lib/functions/network.sh
if [ -n "$(ubus list network.interface.wan_4 2>/dev/null)" ]; then
	network_get_ipaddr WAN_IPADDR wan_4
else
	network_get_ipaddr WAN_IPADDR wan
fi

if [ -n "$WAN_UPTIME" ]; then
	if $TIMEISVALID; then
		WAN_UPTIME_SINCE=$(date "+%Y%m%d%H%M" -d "@$(($(date +%s) - WAN_UPTIME))")
	fi
fi

F=/tmp/easyconfig_wan_up
if [ -e $F ]; then
	WAN_UP_CNT=$(wc -l < $F)
	for i in $(tail -n 10 $F); do
		SINCE=$((SYSTEM_UPTIME - i))
		WAN_UP_SINCE="$WAN_UP_SINCE{\"up\":$SINCE,"
		if $TIMEISVALID; then
			WAN_UP_SINCE="${WAN_UP_SINCE}\"since\":\""$(date "+%Y%m%d%H%M%S" -d "@$(($(date +%s) - SINCE))")"\"},"
		else
			WAN_UP_SINCE="${WAN_UP_SINCE}\"since\":\"\"},"
		fi
	done
fi

if [ -n "$IFNAME" ]; then
	WAN_RX=$(cat /sys/class/net/$IFNAME/statistics/rx_bytes)
	WAN_TX=$(cat /sys/class/net/$IFNAME/statistics/tx_bytes)
fi

WLAN_CLIENTS=0
LAN_CLIENTS=0
TPORTS1=""
BRIDGE=$(ubus call network.interface.lan status | jsonfilter -e @.l3_device)
if [ -e /sys/class/net/$BRIDGE/bridge ]; then
	T=$(brctl showmacs $BRIDGE 2>/dev/null)
	for I in /sys/class/net/$BRIDGE/lower_*; do
		IFNAME=${I##*lower_}
		if [ -e $I/phy80211 ]; then
			CNT=$(iw dev $IFNAME station dump | grep -c Station)
			WLAN_CLIENTS=$((WLAN_CLIENTS+CNT))
		else
			PORTID=$(printf "%d" $(cat /sys/class/net/$BRIDGE/brif/$IFNAME/port_no))
			CNT=$(echo "$T" | awk '/^\s*'$PORTID'\s.*no/{print $2}' | wc -l)
			TPORTS1="${TPORTS1} ${IFNAME};${CNT}"
			LAN_CLIENTS=$((LAN_CLIENTS+CNT))
		fi
	done
fi

PORTS=""
PORTS_SWCONFIG=""
for IFNAME in $TPORTS1; do
	CNT=${IFNAME##*;}
	IFNAME=${IFNAME%%;*}
	PORT=${IFNAME%%.*}
	PORTS="${PORTS}{\"port\":\"${IFNAME}\",\"speed\":"$(cat /sys/class/net/$IFNAME/speed || echo "-1")",\"macs\":${CNT}},"
	[ -e /sbin/swconfig ] || continue

	VLAN=${IFNAME##*.}
	if [ "$PORT" = "$VLAN" ]; then
		VLAN=$(jsonfilter -i /etc/board.json -e '@.switch.switch0.roles' | jsonfilter -q -e '@[*]' | awk '/"'$PORT'"/{print NR; exit}')
		[ -z "$VLAN" ] && VLAN=1
	fi

	T=$(jsonfilter -i /etc/board.json -e '@.switch.switch0.ports[@.device="'$PORT'"]')
	[ -z "$T" ] && continue

	TPORTS2=$(swconfig dev switch0 vlan $VLAN get ports | sed 's/[^0-9 ]//g')
	for T in $TPORTS2; do
		ROLE=""
		INDEX=""
		eval $(jsonfilter -i /etc/board.json -e 'ROLE=@.switch.switch0.ports[@.num='$T'].role' -e 'INDEX=@.switch.switch0.ports[@.num='$T'].index')
		[ -z "$ROLE" ] && continue

		STATUS=$(swconfig dev switch0 port $T get link)
		case "$STATUS" in
			*"link:up speed:1000baseT"*) SPEED="1000";;
			*"link:up speed:100baseT"*) SPEED="100";;
			*"link:up speed:10baseT"*) SPEED="10";;
			*) SPEED="-1";;
		esac
		PORTS_SWCONFIG="${PORTS_SWCONFIG}{\"port\":\"$IFNAME\",\"id\":${INDEX:-$T},\"role\":\"$ROLE\",\"speed\":$SPEED},"
	done
done

show_vpn_up | jsonfilter -q -e '@.result[*].up' | grep -q "true" && VPN_UP="true"

echo '{'
echo '"system_uptime_since":"'$SYSTEM_UPTIME_SINCE'",'
echo '"system_uptime":"'$SYSTEM_UPTIME'",'
echo '"system_load":"'$SYSTEM_LOAD'",'
echo '"system_time":"'$SYSTEM_TIME'",'
echo '"wlan_clients":'$WLAN_CLIENTS','
echo '"lan_clients":'$LAN_CLIENTS','
echo '"ports":['$PORTS'],'
echo '"ports_swconfig":['$PORTS_SWCONFIG'],'
echo '"wan_rx":"'$WAN_RX'",'
echo '"wan_tx":"'$WAN_TX'",'
echo '"wan_uptime_since":"'$WAN_UPTIME_SINCE'",'
echo '"wan_uptime":"'$WAN_UPTIME'",'
echo '"wan_up_cnt":"'$WAN_UP_CNT'",'
echo '"wan_up_since":['$WAN_UP_SINCE'],'
echo '"wan_ipaddr":"'$WAN_IPADDR'",'
echo '"vpn_up":'${VPN_UP:-false}','

wlancurrentchannels

BOARDNAME=$(cat /tmp/sysinfo/board_name)
echo '"sensors":['
case "$BOARDNAME" in
	"cellc,rtl30vw"|\
	"zte,mf286d")
		awk '{printf "{\"Temperatura Wi-Fi 2.4 GHz\":\"%d &deg;C\"},", $1/1000}'  /sys/class/hwmon/hwmon0/temp1_input 2>/dev/null
		awk '{printf "{\"Temperatura Wi-Fi 5 GHz\":\"%d &deg;C\"},", $1/1000}'  /sys/class/hwmon/hwmon1/temp1_input 2>/dev/null
		;;
	"glinet,gl-x300b")
		if [ -n "$(ubus list battery 2>/dev/null)" ]; then
			eval $(ubus call battery info | jsonfilter -q -e 'CHARGING1=@.charging' -e 'TEMPERATURE1=@.temperature' -e 'CYCLES=@.cycles')
			[ "x$CHARGING1" = "x1" ] && CHARGING="Tak" || CHARGING="Nie"
			TEMPERATURE=$(echo "$TEMPERATURE1" | xargs printf "%.1f" )
			echo '{"Ładowanie baterii":"'${CHARGING}'"},{"Temperatura baterii":"'${TEMPERATURE}' &deg;C"},{"Ilość cykli ładowania":"'${CYCLES}'"}'
		fi
		;;
	"ravpower,wd03"|\
	"ravpower,rp-wd03")
		if [ -e /usr/bin/ravpower-mcu ]; then
			if [ $(ravpower-mcu battery-charging) = "0" ]; then
				CHARGING="Nie"
			else
				CHARGING="Tak"
			fi
			BATTERY_LEVEL=$(ravpower-mcu battery-charge)
			echo '{"Ładowanie baterii":"'${CHARGING}'"},{"Poziom naładowania":"'${BATTERY_LEVEL}'%"}'
		elif [ -f /usr/sbin/i2cset ] && [ -f /usr/sbin/i2cget ]; then
			if [ $(i2cset -y 0 0x0a 0x0a 0x01 && i2cget -y 0 0x0a 0x0a) = 0x40 ]; then
				CHARGING="Tak"
			else
				CHARGING="Nie"
			fi
			BATTERY_LEVEL=$(i2cset -y 0 0x0a 0x0a 0x10 && i2cget -y 0 0x0a 0x0a | xargs printf %d)
			echo '{"Ładowanie baterii":"'${CHARGING}'"},{"Poziom naładowania":"'${BATTERY_LEVEL}'%"}'
		fi
		;;
	"zte,mf286"|\
	"zte,mf286a")
		awk '{printf "{\"Temperatura Wi-Fi 5 GHz\":\"%d &deg;C\"},", $1/1000}'  /sys/class/hwmon/hwmon0/temp1_input 2>/dev/null
		if [ -e /usr/bin/sms_tool ]; then
			DEVICE=$(/usr/share/easyconfig/modem/detect.sh)
			if [ -n "$DEVICE" ]; then
				O=$(sms_tool -d $DEVICE at "AT+ZRTEMP")
				BATT=$(echo "$O" | awk -F [:,] '/^\+ZRTEMP/{print $2}' | xargs)
				case "$BATT" in
					0)
						echo '{"Bateria":"Nie zainstalowana"}'
						;;
					1)
						echo '{"Bateria":"Obecna"}'
						CHARGING=$(echo "$O" | awk -F [:,] '/^\+ZRTEMP/{print $3}' | xargs)
						case "$CHARGING" in
							0)
								echo ',{"Ładowanie baterii":"Nie"}'
								;;
							1)
								echo ',{"Ładowanie baterii":"Tak"}'
								;;
							2)
								echo ',{"Ładowanie baterii":"W pełni naładowana"}'
								;;
						esac
						BATTERY_LEVEL=$(echo "$O" | awk -F [:,] '/^\+ZRTEMP/{print $4}' | xargs)
						echo ',{"Poziom naładowania":"'${BATTERY_LEVEL}'%"}'
						BATTERY_TEMP=$(echo "$O" | awk -F [:,] '/^\+ZRTEMP/{print $7}' | xargs)
						echo ',{"Temperatura baterii":"'${BATTERY_TEMP}' &deg;C"}'
						;;
					*)
						echo '{"Bateria":"Brak odczytu"}'
						;;
				esac
			fi
		fi
		;;
	"zte,mf286r")
		awk '{printf "{\"Temperatura Wi-Fi 5 GHz\":\"%d &deg;C\"},", $1/1000}'  /sys/class/hwmon/hwmon0/temp1_input 2>/dev/null
		;;
	*)
		T=0
		FILES=$(grep -s -l "ath10k_hwmon\|ath11k_hwmon" /sys/class/hwmon/hwmon*/name)
		for FILE in $FILES; do
			T1=$(awk '{printf "%d\n", $0/1000}' $(dirname $FILE)/temp1_input 2>/dev/null)
			[ -n "$T1" ] && [ $T1 -gt $T ] && T=$T1
		done
		[ $T -gt 0 ] && printf '{"Temperatura Wi-Fi":"%d &deg;C"},' $T
		;;
esac
echo ']'

if [ -e /etc/config/mwan3 ]; then
	echo ',"mwan3_use_policy":"'$(uci get mwan3.default_rule_v4.use_policy)'"'
fi

simslot

echo ',"ports_mapping":['
case "$BOARDNAME" in
	"teltonika,rut955"*)
		echo '{"eth1":"WAN"}'
		;;
esac
echo ']'

echo '}'
}

##############################################################################

show_system() {
	GUI_VERSION="-devel-"
	VERSION=$(awk -F\' '/DISTRIB_DESCRIPTION/{print $2}' /etc/openwrt_release)
	MODEL=$(cat /tmp/sysinfo/model)
	. /lib/functions/system.sh
	MAC=$(get_mac_label)

	case $(cat /tmp/sysinfo/board_name) in
		"mikrotik"*)
			[ -e /sys/firmware/mikrotik/hard_config/board_serial ] && SN=$(cat /sys/firmware/mikrotik/hard_config/board_serial)
			;;
		"teltonika"*)
			T=$(awk -F: '/"config"$|"0:CONFIG"$/{print $1}' /proc/mtd)
			[ -n "$T" ] && SN=$(hexdump -n 10 -s 48 -e '10/1 "%_c""\n"' /dev/$T)
			;;
	esac

	echo '{'
	echo '"version":"'$VERSION'",'
	echo '"gui_version":"'$GUI_VERSION'",'
	echo '"model":"'$MODEL'",'
	echo '"mac":"'$MAC'",'
	echo '"sn":"'$SN'"'
	echo '}'
}

##############################################################################

show_config()
{
HOSTNAME=$(uci -q get system.@system[0].hostname)
WAN_PROTO=$(uci -q get network.wan.proto)
WAN_IPADDR=$(uci -q get network.wan.ipaddr)
WAN_NETMASK=$(uci -q get network.wan.netmask)
WAN_GATEWAY=$(uci -q get network.wan.gateway)
WAN_DNS=$(uci -q get network.wan.dns)
WAN_DNS_SOURCE="config"
WAN_APN=$(uci -q get network.wan.apn)
WAN_DEVICE=$(uci -q get network.wan.device)
WAN_PINCODE=$(uci -q get network.wan.pincode)
WAN_IFNAME=$(ubus call network.interface.wan status 2>/dev/null | jsonfilter -q -e '@.l3_device')

WAN_IFNAME_DEFAULT=""
WAN_PROTO_DEFAULT=""
WAN_PORTS_DEFAULT=""
if [ -e /etc/board.json ]; then
	if $DEVICESECTION; then
		eval $(jsonfilter -i /etc/board.json -e 'WAN_IFNAME_DEFAULT=@.network.wan.device' -e 'WAN_PROTO_DEFAULT=@.network.wan.protocol' -e 'WAN_PORTS_DEFAULT=@.network.wan.ports')
	else
		eval $(jsonfilter -i /etc/board.json -e 'WAN_IFNAME_DEFAULT=@.network.wan.ifname' -e 'WAN_PROTO_DEFAULT=@.network.wan.protocol' -e 'WAN_PORTS_DEFAULT=@.network.wan.ports')
	fi
fi
[ -z "$WAN_IFNAME_DEFAULT" ] && [ -n "$WAN_PORTS_DEFAULT" ] && WAN_IFNAME_DEFAULT="br-wan"
[ "x$WAN_PROTO_DEFAULT" != "xdhcp" ] && WAN_IFNAME_DEFAULT=""

WAN_IFNAME_HILINK=$(grep -EHi "(cdc ethernet control|rndis communications control)" /sys/class/net/*/device/interface 2>/dev/null | cut -f5 -d/)
[ -z "$WAN_IFNAME_HILINK" ] && WAN_IFNAME_HILINK=$(ls -l /sys/class/net/*/device/driver | grep cdc_ether | sed 's!.*/sys/class/net/\(.*\)/device/.*!\1!')

[ "x$WAN_IFNAME_DEFAULT" = "x$WAN_IFNAME_HILINK" ] && WAN_IFNAME_DEFAULT=""

if [ "x$WAN_PROTO" = "xdhcp" ]; then
	. /lib/functions/network.sh
	network_get_physdev WAN_IFNAME wan
	network_get_gateway WAN_GATEWAY wan
	network_get_ipaddr WAN_IPADDR wan
	if [ -z "$WAN_DNS" ]; then
		network_get_dnsserver WAN_DNS wan
		WAN_DNS_SOURCE="dhcp"
	fi
	network_get_subnet WAN_NETMASK wan
	WAN_NETMASK=${WAN_NETMASK##*/}
	if [ -n "$WAN_NETMASK" ]; then
		WAN_NETMASK=$(ipcalc.sh $WAN_IPADDR $WAN_NETMASK | awk -F= '/NETMASK/{print $2}')
	fi
fi

if [ "x$WAN_PROTO" = "xstatic" ]; then
	if echo "$WAN_IPADDR" | grep -q "/"; then
		T=$(ipcalc.sh $WAN_IPADDR)
		WAN_IPADDR=$(echo "$T" | awk -F= '/IP/{print $2}')
		WAN_NETMASK=$(echo "$T" | awk -F= '/NETMASK/{print $2}')
	fi
fi

[ -n "$WAN_DNS" ] && WAN_DNS='"'$(echo $WAN_DNS | sed 's/ /","/g')'"'

if [ -e /etc/init.d/stubby ]; then
	STUBBY="true"
	T=$(uci -q get stubby.global.listen_address)
	T1=$(uci -q get dhcp.@dnsmasq[0].server | sed 's/#/@/g')
	if [ -n "$T1" ]; then
		echo "$T" | grep -q "$T1" && WAN_DNS_SOURCE="stubby"
	fi
else
	STUBBY="false"
fi

LAN_IPADDR=$(uci -q get network.lan.ipaddr)
LAN_NETMASK=$(uci -q get network.lan.netmask)
if echo "$LAN_IPADDR" | grep -q "/"; then
	T=$(ipcalc.sh $LAN_IPADDR)
	LAN_IPADDR=$(echo "$T" | awk -F= '/IP/{print $2}')
	LAN_NETMASK=$(echo "$T" | awk -F= '/NETMASK/{print $2}')
fi

LAN_DHCP=$(uci -q get dhcp.lan.ignore)
[ "x$LAN_DHCP" = "x1" ] && LAN_DHCP_ENABLED="false" || LAN_DHCP_ENABLED="true"

WAN_DASHBOARD_URL=""
if [ -n "$WAN_IFNAME_HILINK" ]; then
	if [ -n "$WAN_GATEWAY" ]; then
		# Huawei
		if grep -q "usb:v12D1p" /sys/class/net/$WAN_IFNAME_HILINK/device/modalias 2>/dev/null; then
			WAN_DASHBOARD_URL="http://$WAN_GATEWAY"
		fi
		# ZTE
		if grep -q "usb:v19D2p" /sys/class/net/$WAN_IFNAME_HILINK/device/modalias 2>/dev/null; then
			WAN_DASHBOARD_URL="http://$WAN_GATEWAY"
		fi
		# TP-Link Archer MR200
		if grep -q "usb:v2357p000D" /sys/class/net/$WAN_IFNAME_HILINK/device/modalias 2>/dev/null; then
			WAN_DASHBOARD_URL="http://$WAN_GATEWAY/login.html"
		fi
	fi
fi

WAN_MODEM_MODE=""
if [ "x$WAN_PROTO" = "x3g" ]; then
	WAN_MODEM_MODE=$(uci -q get network.wan.service)
fi
if [ "x$WAN_PROTO" = "xncm" ]; then
	WAN_MODEM_MODE=$(uci -q get network.wan.mode)
fi
if [ "x$WAN_PROTO" = "xqmi" ]; then
	WAN_MODEM_MODE=$(uci -q get network.wan.modes)
fi

WAN_WANINLAN="false"
if [ -n "$WAN_IFNAME_DEFAULT" ]; then
	if $DEVICESECTION; then
		T=$(uci -q get network.lan.device)
		if [ -n "$T" ]; then
			SEC=$(uci show network | awk -F. '/\.name='\'''${T}''\''$/{print $2}')
			if [ -n "$SEC" ]; then
				case "$(uci -q get network.$SEC.ports)" in
					*$WAN_IFNAME_DEFAULT*)
					WAN_WANINLAN="true"
					;;
				esac
			fi
		fi
	else
		case "$(uci -q get network.lan.ifname)" in
			*$WAN_IFNAME_DEFAULT*)
			WAN_WANINLAN="true"
			;;
		esac
	fi
fi

REVISION=$(awk -F\' '/DISTRIB_REVISION/{print $2}' /etc/openwrt_release)

echo '{'
echo '"revision":"'$REVISION'",'
echo '"devicesection":'$DEVICESECTION','
echo '"system_hostname":"'$HOSTNAME'",'
echo '"wan_proto":"'${WAN_PROTO:-none}'",'
echo '"wan_ipaddr":"'$WAN_IPADDR'",'
echo '"wan_netmask":"'${WAN_NETMASK:-255.255.255.0}'",'
echo '"wan_gateway":"'$WAN_GATEWAY'",'
echo '"wan_dns":['$WAN_DNS'],'
echo '"wan_dns_source":"'$WAN_DNS_SOURCE'",'
echo '"wan_apn":"'${WAN_APN:-internet}'",'
echo '"wan_device":"'$WAN_DEVICE'",'
echo '"wan_pincode":"'$WAN_PINCODE'",'
echo '"wan_ifname":"'$WAN_IFNAME'",'
echo '"wan_ifname_default":"'$WAN_IFNAME_DEFAULT'",'
echo '"wan_ifname_hilink":"'$WAN_IFNAME_HILINK'",'
echo '"wan_dashboard_url":"'$WAN_DASHBOARD_URL'",'
echo '"wan_modem_mode":"'$WAN_MODEM_MODE'",'
echo '"wan_waninlan":'$WAN_WANINLAN','

echo '"wan_protos":["none"'
T=$(echo $(sed 's/^$/######/g' /sys/kernel/debug/usb/devices) | sed 's/######/\n/g' | awk '/Driver=rndis_host/ && /Driver=cdc_acm/')
if [ -n "$T" ]; then
	echo ',"ncm"'
else
	if [ -n "$WAN_IFNAME_DEFAULT" ]; then
		echo ',"dhcp","static"'
	fi
	tty=$(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null)
	if [ -n "$tty" ]; then
		echo ',"3g"'
	fi
	mbim=$(grep cdc_mbim /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$mbim" ]; then
		echo ',"mbim"'
	fi
	if [ -e /lib/netifd/proto/modemmanager.sh ]; then
		echo ',"modemmanager"'
	fi
	ncm=$(grep cdc_ncm /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$ncm" ]; then
		echo ',"ncm"'
	fi
	qmi=$(grep qmi_wwan /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$qmi" ]; then
		echo ',"qmi"'
	fi
	if [ -n "$WAN_IFNAME_HILINK" ]; then
		echo ',"dhcp_hilink"'
	fi
fi
echo '],'

echo '"wan_devices":['
ttys=$(ls -1 /dev/ttyUSB* /dev/ttyACM* /dev/cdc-wdm* 2>/dev/null)
O=""
for tty in $ttys; do
	[ -n "$O" ] && O="$O,"
	O="$O"'"'$tty'"'
done
echo "$O"'],'

echo '"wan_devices_mm":['
if [ -e /lib/netifd/proto/modemmanager.sh ]; then
	T=$(mmcli -J -L | jsonfilter -q -e '@["modem-list"]' | jsonfilter -q -e '@.*')
	for M in $T; do
		DEVICE=""
		MANUFACTURER=""
		MODEL=""
		eval $(mmcli -J -m $M | jsonfilter -q -e 'DEVICE=@.modem.generic.device' -e 'MANUFACTURER=@.modem.generic.manufacturer' -e 'MODEL=@.modem.generic.model')
		[ -n "$DEVICE" ] && echo "[\"$DEVICE\",\"$MANUFACTURER\",\"$MODEL\"],"
	done
fi
echo '],'

if uci -q get dhcp.lan.dhcp_option | grep -q ANDROID_METERED; then
	echo '"wan_metered":true,'
else
	echo '"wan_metered":false,'
fi

echo '"lan_ipaddr":"'$LAN_IPADDR'",'
echo '"lan_netmask":"'$LAN_NETMASK'",'
echo '"lan_dhcp_enabled":'$LAN_DHCP_ENABLED','

wlancurrentchannels

RADIOS=$(uci -q show wireless | awk -F. '/type=/{print $2}')
echo '"wlan_devices":['
for R in $RADIOS; do
	echo '"'$R'",'
done
echo "],"
for R in $RADIOS; do
	echo '"'$R'":{'
	WLAN_RADIO_DISABLED=$(uci -q get wireless.$R.disabled)
	WLAN_TXPOWER=$(uci -q get wireless.$R.txpower)
	WLAN_CHANNEL=$(uci -q get wireless.$R.channel)
	WLAN_BAND=$(uci -q get wireless.$R.band)
	[ "x$WLAN_CHANNEL" = "xauto" ] && WLAN_CHANNEL=0
	T=$(uci -q show wireless | awk -F. '/device='\'''${R}''\''$/{print $2}')
	WLAN_DISABLED=1
	WLAN_SSID=""
	WLAN_ENCRYPTION=""
	WLAN_KEY=""
	WLAN_ISOLATE=0
	WLAN_HIDDEN=0
	WLAN_MACADDR=""
	WLAN_SEC=""
	if [ -n "$T" ]; then
		for T1 in $T; do
			[ "x$(uci -q get wireless.$T1.network)" = "xlan" ] || continue
			[ "x$(uci -q get wireless.$T1.mode)" = "xap" ] || continue
			WLAN_SEC=$T1
			WLAN_DISABLED=$(uci -q get wireless.$WLAN_SEC.disabled)
			WLAN_SSID=$(uci -q get wireless.$WLAN_SEC.ssid)
			WLAN_ENCRYPTION=$(uci -q get wireless.$WLAN_SEC.encryption)
			WLAN_KEY=$(uci -q get wireless.$WLAN_SEC.key)
			WLAN_ISOLATE=$(uci -q get wireless.$WLAN_SEC.isolate)
			WLAN_HIDDEN=$(uci -q get wireless.$WLAN_SEC.hidden)
			WLAN_MACADDR=$(uci -q get wireless.$WLAN_SEC.macaddr)
			break
		done
		[ -z "$WLAN_SSID" ] && WLAN_DISABLED=1
	fi
	[ "x$WLAN_RADIO_DISABLED" = "x1" ] && WLAN_DISABLED=1
	echo '"wlan_disabled":'${WLAN_DISABLED:-0}','
	echo '"wlan_txpower":"'$WLAN_TXPOWER'",'
	echo '"wlan_channel":"'$WLAN_CHANNEL'",'
	echo '"wlan_band":"'$WLAN_BAND'",'
	echo '"wlan_ssid":"'$(escapeJSON "$WLAN_SSID")'",'
	echo '"wlan_encryption":"'$WLAN_ENCRYPTION'",'
	echo '"wlan_key":"'$(escapeJSON "$WLAN_KEY")'",'
	echo '"wlan_isolate":'${WLAN_ISOLATE:-0}','
	echo '"wlan_hidden":'${WLAN_HIDDEN:-0}','
	echo '"wlan_macaddr":"'$WLAN_MACADDR'",'
	echo '"wlan_section":"'$WLAN_SEC'",'
	O=$(iwinfo $R info 2>/dev/null)
	HWMODE=$(echo "$O" | awk -F: '/HW Mode/{gsub(" ","",$3);print $3}')
	echo '"wlan_hwmode":"'$HWMODE'",'
	PHY=$(echo "$O" | awk -F: '/PHY name:/{gsub(" ","",$3);print $3}')
	echo '"wlan_phy":"'$PHY'",'
	echo '"wlan_channels":{'
	O=""
	[ -n "$PHY" ] && O=$(iw phy $PHY info | grep -v "(disabled)" | grep -v "(no IR)" | awk '/\* [0-9\.]+ MHz/{dfs="false";if(index($0, "radar detection") != 0){dfs="true"};gsub(/\[|\]|\(|\)/,""); printf ",\"%d\":[\"%s\",\"%s\",%s]", $4, $2, $5, dfs}')
	if [ -z "$O" ]; then
		echo '"'$WLAN_CHANNEL'":["","",false]'
	else
		echo ${O:1}
	fi
	echo '},'
	echo '},'
done

T=$(uci -q get firewall.dmz.dest_ip)
echo '"firewall_dmz":"'$T'",'

T=$(uci -q get firewall.dns_53_redirect)
[ "x$T" = "xredirect" ] && T="true" || T="false"
echo '"lan_forcedns":'$T','

T=$(uci -q get dhcp.@dnsmasq[0].logqueries)
[ "x$T" = "x1" ] && T="true" || T="false"
echo '"dhcp_logqueries":'$T','

T=""
RULES=$(uci show firewall | awk -F. '/\.src='\''lan'\''$/{print $2}')
for RULE in $RULES; do
	T2=$(uci -q get firewall.${RULE}.dest)
	if [ "x$T2" = "xwan" ]; then
		T2=$(uci -q get firewall.$RULE)
		if [ "x$T2" = "xforwarding" ]; then
			T="$RULE"
			break
		fi
	fi
done
echo '"wan_lanto":"'$T'",'

T=$(uci -q get easyconfig.global.datarec_period)
echo '"datarec_period":'${T:-15}','

BUTTON_NAME=""
BUTTON=""
ACTION="none"

if [ -e /sys/firmware/devicetree/base/keys/rfkill ]; then
	BUTTON_NAME="WiFi"
	BUTTON="rfkill"
elif [ -e /sys/firmware/devicetree/base/keys/wps ]; then
	BUTTON_NAME="WPS"
	BUTTON="wps"
fi

if [ -n "$BUTTON" ]; then
	[ -e /usr/share/easyconfig/rc.button/rfkill ] || cp /etc/rc.button/rfkill /usr/share/easyconfig/rc.button/rfkill
	if grep -q leds /etc/rc.button/$BUTTON; then
		ACTION="leds"
	fi
	if grep -q rfkill /etc/rc.button/$BUTTON; then
		ACTION="rfkill"
	fi
	if grep -q "easyconfig.vpn" /etc/rc.button/$BUTTON; then
		ACTION="vpn"
	fi
	if grep -q "forwarding" /etc/rc.button/$BUTTON; then
		ACTION="killswitch"
	fi
	if grep -q "wol" /etc/rc.button/$BUTTON; then
		ACTION="wol"
	fi
fi
echo '"button":{"name":"'$BUTTON_NAME'","code":"'$BUTTON'","action":"'$ACTION'"},'

if [ -e /sys/firmware/devicetree/base/keys/reset ]; then
	if [ -e /etc/rc.button/reset ]; then
		[ -e /usr/share/easyconfig/rc.button/reset ] || cp /etc/rc.button/reset /usr/share/easyconfig/rc.button/reset
		echo '"button_reset":1,'
	else
		echo '"button_reset":0,'
	fi
else
	echo '"button_reset":-1,'
fi

echo '"services":{'

echo '"statistics":{'

if [ -e /sbin/stat.sh ]; then
	T=$(/sbin/stat.sh token)
	echo '"token":"'$T'",'
	T=$(uci -q get system.@system[0].stat)
	if [ "x$T" = "x1" ]; then
		echo '"enabled":1'
	else
		echo '"enabled":0'
	fi
else
	echo '"enabled":-1'
fi

echo '},'

if [ -e /usr/bin/sms_tool ]; then
	echo '"ussdsms":true,'
else
	echo '"ussdsms":false,'
fi

VPN=""
[ -f /usr/lib/pppd/*/pptp.so ] && VPN=${VPN}'"pptp",'
[ -e /lib/netifd/proto/sstp.sh ] && VPN=${VPN}'"sstp",'
[ -e /lib/netifd/proto/wireguard.sh ] && VPN=${VPN}'"wireguard",'
[ -e /etc/init.d/openvpn ] && VPN=${VPN}'"openvpn",'
[ -e /etc/init.d/zerotier ] && VPN=${VPN}'"zerotier",'
echo '"vpn":['$VPN'],'

if [ -e /etc/init.d/adblock ]; then
	echo '"adblock":true,'
else
	echo '"adblock":false,'
fi

if [ -e /etc/init.d/nft-qos ]; then
	echo '"nftqos":true,'
else
	echo '"nftqos":false,'
fi

echo '"stubby":'$STUBBY','

if [ -e /usr/bin/sunwait ]; then
	echo '"sunwait":true,'
else
	echo '"sunwait":false,'
fi

if hostapd -vsae; then
	echo '"sae":true,'
else
	echo '"sae":false,'
fi

MB4G="false"
MB5GNSA="false"
MB5GSA="false"
if [ -e /usr/bin/modemband.sh ]; then
	T=$(/usr/bin/modemband.sh getinfo)
	if echo "$T" | grep -q -i 'found'; then
		MB4G="false"
	elif echo "$T" | grep -q -i 'unsupported'; then
		MB4G="false"
	else
		MB4G="true"
		/usr/bin/modemband.sh getsupportedbands5gnsa | grep -q -i 'unsupported' || MB5GNSA="true"
		/usr/bin/modemband.sh getsupportedbands5gsa | grep -q -i 'unsupported' || MB5GSA="true"
	fi
fi
echo '"modemband4g":'$MB4G','
echo '"modemband5gnsa":'$MB5GNSA','
echo '"modemband5gsa":'$MB5GSA','

if ubus list | grep -q gps; then
	echo '"gps":true,'
else
	echo '"gps":false,'
fi

if [ -e /usr/bin/etherwake ]; then
	echo '"wol":true,'
else
	echo '"wol":false,'
fi

FLOWOFFLOADING="false"
T=$(uci show firewall | awk -F[.=] '/=defaults$/{print $2}')
if [ -n "$T" ]; then
	T1=$(uci -q get firewall.@defaults[0].flow_offloading)
	[ "x$T1" = "x1" ] && FLOWOFFLOADING="true"
fi
echo '"flowoffloading":'$FLOWOFFLOADING','

echo '},'

echo '}'
}

##############################################################################

show_watchdog() {
	[ -e /etc/crontabs/root ] && WAT=$(grep easyconfig_watchdog /etc/crontabs/root)
	W_ENABLED="false"
	W_MAM=""
	W_RUNDATE=""

	if [ -n "$WAT" ]; then
		W_ENABLED="true"
		if [ -e /tmp/easyconfig_watchdog ]; then
			W_MAM=$(awk '/round-trip/{print $4}' /tmp/easyconfig_watchdog)
			W_RUNDATE=$(date "+%Y%m%d%H%M%S" -r /tmp/easyconfig_watchdog)
		fi
	fi

	W_PERIOD=$(uci -q get easyconfig.watchdog.period)
	W_PERIOD_CNT=$(uci -q get easyconfig.watchdog.period_count)
	W_DELAY=$(uci -q get easyconfig.watchdog.delay)
	W_DEST=$(uci -q get easyconfig.watchdog.dest)
	W_ACTION=$(uci -q get easyconfig.watchdog.action)

	echo '{'
	echo '"watchdog_enabled": '$W_ENABLED','
	echo '"watchdog_period": "'${W_PERIOD:-3}'",'
	echo '"watchdog_period_count": "'${W_PERIOD_CNT:-1}'",'
	echo '"watchdog_delay": "'${W_DELAY:-3}'",'
	echo '"watchdog_dest": "'${W_DEST:-google.com}'",'
	echo '"watchdog_action": "'${W_ACTION:-wan}'",'
	echo '"watchdog_minavgmax": "'$W_MAM'",'
	echo '"watchdog_rundate": "'$W_RUNDATE'"'
	echo '}'
}

##############################################################################

client_data() {
	MAC=$1
	NMAC=${MAC//:/}

	T=$(uci -q get easyconfig.m${NMAC}.name)
	[ -n "$T" ] && USERNAME=',"username":"'"$(escapeJSON "$T")"'"' || USERNAME=',"username":""'

	BLOCK=',"block":0,"blockdata":""'
	T=$(uci -q get firewall.m${NMAC})
	[ -n "$T" ] && BLOCK=',"block":1,"blockdata":""'
	T=$(easyconfig_firewall_helper.sh get $MAC)
	[ "x$T" = "x000000000000000000000000000000000000000000000000" ] || BLOCK=',"block":2,"blockdata":"'$T'"'

	TUP=$(uci -q get nft-qos.m${NMAC}up.rate)
	TDOWN=$(uci -q get nft-qos.m${NMAC}down.rate)
	QOS=',"qos":{"bwup":'${TUP:-0}',"bwdown":'${TDOWN:-0}'}'

	STATICDHCP=',"staticdhcp":"'$(uci -q get dhcp.m${NMAC}.ip)'"'

	echo "${USERNAME}${BLOCK}${QOS}${STATICDHCP}"
}

show_clients() {
NETWORKS=$(uci show network | awk -F. '/\.proto='\''static'\''/{print $2}')
WLAN_MAC=""
RADIOS=$(uci -q show wireless | awk -F. '/type=/{print $2}')
for R in $RADIOS; do
	T=$(ubus call network.wireless status '{"device":"'$R'"}')
	for SEC in $NETWORKS; do
		[ "$SEC" = "loopback" ] && continue
		[ "$SEC" = "wan" ] && continue
		[ "$SEC" = "wan6" ] && continue
		IFNAME=$(echo "$T" | jsonfilter -q -e '@.*.interfaces[@.config.network[*]="'$SEC'"].ifname')
		if [ -n "$IFNAME" ]; then
			T1=""
			T2=""
			eval $(echo "$T" | jsonfilter -q -e 'T1=@.*.config.hwmode' -e 'T2=@.*.config.band')
			BAND=2
			[ "x$T1" = "x11a" ] || [ "x$T2" = "x5g" ] && BAND=5
			[ "x$T2" = "x6g" ] && BAND=6
			PHY=$(iwinfo nl80211 phyname $R)
			for i in $IFNAME; do
				WLAN_MAC="$WLAN_MAC "$(iw dev $i station dump | awk -v band=$BAND -v phy=$PHY -v network="$SEC" '{if($1 == "Station") {MAC=$2;station[MAC]=1} if($0 ~ /rx bytes:/) {rx[MAC]=$3} if($0 ~ /tx bytes:/) {tx[MAC]=$3} if($0 ~ /^\s*signal:/) {signal[MAC]=$2} if($0 ~ /connected time:/) {connected[MAC]=$3}} END {for (w in station) {printf "\"mac\":\"%s\",\"tx\":%s,\"rx\":%s,\"signal\":%d,\"connected\":%d,\"band\":%d,\"phy\":\"%s\",\"active\":true,\"type\":2,\"section\":\"%s\",\"network\":\"\" ", w, tx[w], rx[w], signal[w], connected[w], band, phy, network}}')
			done
		fi
	done
done

echo '{"result":['
for M in $WLAN_MAC; do
	T=${M%\",\"tx*}
	MAC=${T##*\"}

	IP=$(awk '/'$MAC'/{printf ",\"ip\":\"%s\",\"dhcpname\":\"%s\"", $3, $4}' /tmp/dhcp.leases)
	[ -z "$IP" ] && IP=$(awk '/0x[26]\s*'$MAC'/{printf ",\"ip\":\"%s\",\"dhcpname\":\"\"", $1; exit}' /proc/net/arp)
	[ -z "$IP" ] && IP=',"ip":"","dhcpname":""'

	T=${M%,\"ba*}
	CONNECTED=${T##*:}
	if $TIMEISVALID; then
		CONNECTED_SINCE=',"connected_since":"'$(date "+%Y%m%d%H%M" -d "@$(($(date +%s) - CONNECTED))")'"'
	else
		CONNECTED_SINCE=',"connected_since":""'
	fi
	CAPA=""
	grep -qi "^ht supported" /sys/kernel/debug/ieee80211/*/*/stations/${MAC}/ht_capa 2>/dev/null && CAPA=',"capa":4'
	grep -qi "^vht supported" /sys/kernel/debug/ieee80211/*/*/stations/${MAC}/vht_capa 2>/dev/null && CAPA=',"capa":5'
	grep -qi "^he supported" /sys/kernel/debug/ieee80211/*/*/stations/${MAC}/he_capa 2>/dev/null && CAPA=',"capa":6'
	grep -qi "^eht supported" /sys/kernel/debug/ieee80211/*/*/stations/${MAC}/eht_capa 2>/dev/null && CAPA=',"capa":7'

	echo "{${M}${IP}${CONNECTED_SINCE}${CAPA}$(client_data $MAC)},"
done

for SEC in $NETWORKS; do
	[ "$SEC" = "loopback" ] && continue
	[ "$SEC" = "wan" ] && continue
	[ "$SEC" = "wan6" ] && continue
	if [ "$SEC" = "lan" ]; then
		NETWORK="Sieć lokalna"
	else
		NETWORK=$(uci -q get network.$SEC.description)
		[ -z "$NETWORK" ] && NETWORK=$SEC
		NETWORK=$(escapeJSON "$NETWORK")
	fi
	NETWORKLIST="{\"section\":\"$SEC\",\"network\":\"$NETWORK\"},${NETWORKLIST}"
	BRIDGE=$(ubus call network.interface.$SEC status | jsonfilter -e @.l3_device)
	if [ -e /sys/class/net/$BRIDGE/bridge ]; then
		T=$(brctl showmacs $BRIDGE 2>/dev/null)
		for I in /sys/class/net/$BRIDGE/lower_*; do
			if [ ! -e $I/phy80211 ]; then
				IFNAME=${I##*lower_}
				PORTID=$(printf "%d" $(cat /sys/class/net/$BRIDGE/brif/$IFNAME/port_no))
				LAN_MACS=$(echo "$T" | awk '/^\s*'$PORTID'\s.*no/{print $2}')
				for M in $LAN_MACS; do
					IP=$(awk '/'$M'/{printf ",\"ip\":\"%s\",\"dhcpname\":\"%s\"", $3, $4}' /tmp/dhcp.leases)
					[ -z "$IP" ] && IP=$(awk '/0x[26]\s*'$M'/{printf ",\"ip\":\"%s\",\"dhcpname\":\"\"", $1; exit}' /proc/net/arp)
					[ -z "$IP" ] && IP=',"ip":"","dhcpname":""'
					echo "{\"mac\":\"$M\"${IP},\"active\":true,\"port\":\"${IFNAME}\",\"type\":1,\"section\":\"${SEC}\",\"network\":\"${NETWORK}\"$(client_data $M)},"
				done
			fi
		done
	fi
done

if [ -e "/tmp/easyconfig_statistics.json" ]; then
	eval $(jsonfilter -i /tmp/easyconfig_statistics.json -e 'MACS=@')
	for M in $MACS; do
		[ "$M" = "wan" ] && continue
		FIRST_SEEN=""
		LAST_SEEN=""
		DHCPNAME=""
		TYPE=""
		NETWORK=""
		eval $(jsonfilter -i /tmp/easyconfig_statistics.json -e 'FIRST_SEEN=@["'$M'"].first_seen' -e 'LAST_SEEN=@["'$M'"].last_seen' -e 'DHCPNAME=@["'$M'"].dhcpname' -e 'TYPE=@["'$M'"].type' -e 'NETWORK=@["'$M'"].last_network')
		echo "{\"mac\":\"${M//_/:}\",\"active\":false,\"first_seen\":\"$FIRST_SEEN\",\"last_seen\":\"$LAST_SEEN\",\"dhcpname\":\"$DHCPNAME\",\"type\":${TYPE:-2},\"section\":\"\",\"network\":\"$(escapeJSON "$NETWORK")\"$(client_data ${M//_/:})},"
	done
fi

echo '],"networks":['$NETWORKLIST']}'
}

show_clientslogs() {
echo '{"result":['
T=$(zcat /tmp/easyconfig_logs.txt.gz 2>/dev/null | tail -n 3000 | awk '
/AP-STA-CONNECTED/ {MAC[$1]=$6; WIFI[$6]=$1; EVENT[$1]="connect"; DESC[$1]=$4}
/DHCPACK\(/ {if(WIFI[$6]!=0){DHCP[WIFI[$6]]=$7; NAME[$6]=$7}else{MAC[$1]=$6; EVENT[$1]="connect"; DHCP[$1]=$7; DESC[$1]=""}}
/AP-STA-DISCONNECTED/ {MAC[$1]=$6; WIFI[$6]=0; EVENT[$1]="disconnect"; DHCP[$1]=NAME[$6]; NAME[$6]=""; DESC[$1]=$4}
END { for (T in EVENT) {
		printf "{\"id\":\"%s\",\"mac\":\"%s\",\"username\":\"\",\"dhcpname\":\"%s\",\"event\":\"%s\",\"desc\":\"%s\"},\n", T, MAC[T], DHCP[T], EVENT[T], DESC[T]
	}
}')

MACS=$(uci show easyconfig | awk -F[=m] '/=mac/{print $2}')
for MAC in $MACS; do
	NAME=$(uci -q get easyconfig.m${MAC}.name)
	if [ -n "$NAME" ]; then
		TMAC=${MAC:0:2}:${MAC:2:2}:${MAC:4:2}:${MAC:6:2}:${MAC:8:2}:${MAC:10:2}
		T=$(echo "$T" | sed "s/,\"mac\":\"$TMAC\",\"username\":\".*\",\"dhcpname\"/,\"mac\":\"$TMAC\",\"username\":\"""$(escapeForSed "$NAME")""\",\"dhcpname\"/g")
	fi
done

BANDS=$(iw dev 2>/dev/null | awk '{if($0 ~ /Interface /) {INTERFACE = $2; ssid[INTERFACE] = ""; band[INTERFACE] = "?"}
if($1 == "ssid") {t="";for(i=2;i<=NF-1;++i){t=t$i" "};if(NF<2){t=""}else{t=t$NF}; gsub(/\\/,"\\\\", t); gsub(/\"/, "\\\"", t); ssid[INTERFACE]=t}
if($1 == "channel") {if($9 >= 5955){band[INTERFACE] = "6"}else if($9 >= 5160){band[INTERFACE] = "5"}else{band[INTERFACE] = "2"}}
} END { for (t in ssid) {
	printf "s/,\"desc\":\"%s:\"/,\"desc\":{\"band\":\"%s\",\"ssid\":\"%s\"}/g\n", t, band[t], ssid[t]
}
}')
for B in $BANDS; do
	T=$(echo "$T" | sed "$B")
done

echo "${T%?}"
echo ']}'
}

show_clientstatistics() {
	read input;
	json_load "$input"
	json_get_vars mac

	echo '{"statistics":['

	if [ -z "$mac" ]; then
		echo "]}"
		exit 0
	fi
	if [ ! -e "/tmp/easyconfig_statistics.json" ]; then
		echo "]}"
		exit 0
	fi

	T="$(jsonfilter -i /tmp/easyconfig_statistics.json -e '@["'${mac//:/_}'"]')"
	if [ -z "$T" ]; then
		echo "]}"
		exit 0
	fi

	local _json_no_warning=1
	json_init
	json_load "$T"
	json_get_keys IFNAMES
	for I in $IFNAMES; do
		if json_is_a "$I" object; then
			json_select "$I"
			json_get_keys DAYS
			for D in $DAYS; do
				if json_is_a "$D" object; then
					json_select "$D"
					json_get_vars total_tx total_rx
					json_select ..
					echo "{\"ifname\":\"$I\",\"date\":\"$D\",\"tx\":$total_tx,\"rx\":$total_rx},"
				fi
			done
			json_select ..
		fi
	done
	echo "]}"
}

show_clientbandwidth() {
	read input;
	json_load "$input"
	json_get_vars mac section

	echo '{"result":['

	if [ -z "$mac" ]; then
		echo ']}'
		exit 0
	fi

	if [ -z "$section" ]; then
		echo ']}'
		exit 0
	fi

	IFNAMES=$(ubus call network.wireless status | jsonfilter -q -e '@.*.interfaces[@.config.network[*]="'$section'"].ifname')
	for i in $IFNAMES; do
		iw dev $i station get $mac 2>/dev/null | awk -v ifname=$i -v search=$mac '{if($1 == "Station") {MAC=$2;station[MAC]=1} if($0 ~ /rx bytes:/) {rx[MAC]=$3} if($0 ~ /tx bytes:/) {tx[MAC]=$3}} END {for (w in station) {if(w == search){printf "{\"ifname\":\"%s\",\"tx_bytes\":%s,\"rx_bytes\":%s},", ifname, tx[w], rx[w]}}}'
	done
	echo ']}'
}

##############################################################################

show_traffic() {
	T_CYCLE=$(uci -q get easyconfig.traffic.cycle)
	T_WARNING_ENABLED=$(uci -q get easyconfig.traffic.warning_enabled)
	T_WARNING_VALUE=$(uci -q get easyconfig.traffic.warning_value)
	T_WARNING_UNIT=$(uci -q get easyconfig.traffic.warning_unit)
	T_WARNING_CYCLE=$(uci -q get easyconfig.traffic.warning_cycle)

	echo '{"traffic_cycle": "'${T_CYCLE:-1}'",'
	echo '"traffic_warning_enabled": "'${T_WARNING_ENABLED:-0}'",'
	echo '"traffic_warning_value": "'${T_WARNING_VALUE:-0}'",'
	echo '"traffic_warning_unit": "'${T_WARNING_UNIT:-g}'",'
	echo '"traffic_warning_cycle": "'${T_WARNING_CYCLE:-p}'"}'
}

##############################################################################

show_modem()
{
	T=$(uci -q get easyconfig.modem.force_plmn)
	[ "x$T" = "x1" ] || T=""

	if [ "x$(uci -q get network.wan.proto)" = "xqmi" ] && [ "x$(uci -q get easyconfig.modem.force_qmi)" = "x1" ]; then
		FORCE_PLMN=$T /usr/share/easyconfig/modem/info_qmi.sh
	else
		FORCE_PLMN=$T /usr/share/easyconfig/modem/info.sh
	fi
}

##############################################################################

show_modemsettings() {
	MODEM_DEVICE=$(uci -q get easyconfig.modem.device)
	MODEM_FORCE_QMI=$(uci -q get easyconfig.modem.force_qmi)
	MODEM_FORCE_PLMN=$(uci -q get easyconfig.modem.force_plmn)
	SMS_STORAGE=$(uci -q get easyconfig.sms.storage)
	SMS_JOIN=$(uci -q get easyconfig.sms.join)
	USSD_RAW_INPUT=$(uci -q get easyconfig.ussd.raw_input)
	USSD_RAW_OUTPUT=$(uci -q get easyconfig.ussd.raw_output)
	echo "{"
	echo '"modem_device":"'${MODEM_DEVICE}'"'
	echo ',"modem_force_qmi":'${MODEM_FORCE_QMI:-0}
	echo ',"modem_force_plmn":'${MODEM_FORCE_PLMN:-0}
	echo ',"sms_storage":"'${SMS_STORAGE}'"'
	echo ',"sms_join":'${SMS_JOIN:-1}
	echo ',"ussd_raw_input":'${USSD_RAW_INPUT:-1}
	echo ',"ussd_raw_output":'${USSD_RAW_OUTPUT:-1}
	echo "}"
}

##############################################################################

show_modeminfo() {
	DEVICE=$(/usr/share/easyconfig/modem/detect.sh)
	if [ -n "$DEVICE" ]; then
		O=$(gcom -d $DEVICE -s /usr/share/easyconfig/modem/vendorproduct.gcom)
		T=$(echo "$O" | awk '/CGMI:/{gsub(/.*CGMI[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
		[ -n "$T" ] && VENDOR="$T"
		T=$(echo "$O" | awk '/CGMM:/{gsub(/.*CGMM[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
		[ -n "$T" ] && PRODUCT="$T"
		T=$(echo "$O" | awk '/CGMR:/{gsub(/.*CGMR[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
		[ -n "$T" ] && REVISION="$T"
		T=$(echo "$O" | awk '/CGSN:/{gsub(/.*CGSN[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
		[ -n "$T" ] && IMEI="$T"
		T=$(echo "$O" | awk '/CCID:/{gsub(/.*CCID[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
		[ -n "$T" ] && ICCID="$T"
	fi

	echo '{'
	echo '"vendor":"'$VENDOR'"'
	echo ',"product":"'$PRODUCT'"'
	echo ',"revision":"'$REVISION'"'
	echo ',"imei":"'$IMEI'"'
	echo ',"iccid":"'$ICCID'"'
	simslot
	echo '}'
}

##############################################################################

setsimslot() {
	read input;
	json_load "$input"
	json_get_vars slot
	if [ -z "$slot" ]; then
		echo '{"error":1}'
		return
	fi
	case $(cat /tmp/sysinfo/board_name) in
		"teltonika,rut955"*)
			# hardcode device
			if [ -e /dev/cdc-wdm0 ]; then
				ifdown wan
				uqmi -d /dev/cdc-wdm0 --uim-power-off --uim-slot 1
				echo $slot > /sys/class/gpio/gpio503/value
				uci set system.sim_sel.value=$slot
				uci commit system
				uqmi -d /dev/cdc-wdm0 --uim-power-on --uim-slot 1
				ifup wan
			fi
			;;
		"zbtlink,zbt-we826-e")
			# hardcode device
			if [ -e /dev/cdc-wdm0 ]; then
				ifdown wan
				uqmi -d /dev/cdc-wdm0 --uim-power-off --uim-slot 1
				echo $slot > /sys/class/gpio/gpio13/value
				uci set system.sim_switch.value=$slot
				uci commit system
				uqmi -d /dev/cdc-wdm0 --uim-power-on --uim-slot 1
				ifup wan
			fi
			;;
		"zyxel,nr7101")
			if [ ! -e /usr/bin/sms_tool ]; then
				echo '{"error":2}'
				return
			fi
			DEVICE=$(/usr/share/easyconfig/modem/detect.sh)
			if [ -z "$DEVICE" ]; then
				echo '{"error":3}'
				return
			fi
			ifdown wan
			sms_tool -d $DEVICE at "AT+QUIMSLOT=${slot}" >/dev/null 2>&1
			ifup wan
			;;
	esac
	echo '{"error":0}'
}

##############################################################################

show_ussd() {
	read input
	json_load "$input"
	json_get_vars code
	if [ -z "$code" ]; then
		T="Error: wrong ussd code"
	else
		OPT=""
		T=$(uci -q get easyconfig.ussd.raw_input)
		[ "x$T" = "x1" ] && OPT="$OPT -R"
		T=$(uci -q get easyconfig.ussd.raw_output)
		case "$T" in
			1) OPT="$OPT -r";;
			2) OPT="$OPT -c 0";;
			3) OPT="$OPT -c 2";;
		esac
		DEVICE=$(/usr/share/easyconfig/modem/detect.sh)
		if [ -n "$DEVICE" ]; then
			T=$(sms_tool -d $DEVICE $OPT ussd "$code" 2>/dev/null)
		else
			T=""
		fi
	fi

	json_init
	json_add_string "result" "$T"
	json_dump
}

##############################################################################

show_ussdshortcuts() {
	echo '{"shortcuts":['
	T=$(uci show easyconfig | awk -F[=.] '/=ussd/{print $2}')
	for i in $T; do
		echo '{"'$(uci -q get easyconfig.$i.code)'":"'$(uci -q get easyconfig.$i.description)'"},'
	done
	echo ']}'
}

##############################################################################

show_sms() {
	read input;
	json_load "$input"
	json_get_vars action arg1 arg2

	DEVICE=$(/usr/share/easyconfig/modem/detect.sh)
	if [ -z "$DEVICE" ]; then
		echo '{"response":"Device not found"}'
		exit 0
	fi

	case "$action" in
		"delete")
			RES="Deleted message"
			for idx in $arg1; do
				T=$(sms_tool -d $DEVICE delete "$idx")
				echo "$T" | grep -qi "error deleting message" && RES="error deleting message"
			done
			echo "{\"response\":\"$RES\"}"
			;;
		"send")
			T=$(sms_tool -d $DEVICE send "$arg1" "$arg2")
			echo "{\"response\":\"$T\"}" | tr '\n' ' '
			;;
		*)
			JOIN=$(uci -q get easyconfig.sms.join)
			STORAGE=""
			T=$(uci -q get easyconfig.sms.storage)
			[ -n "$T" ] && STORAGE="-s $T"
			O=$(sms_tool -d $DEVICE $STORAGE -j -f "%Y%m%d%H%M%S" recv 2>/dev/null)
			[ -n "$O" ] && echo "$O" | sed 's/"msg"/"join":'${JOIN:-1}',"msg"/' || echo '{"join":1,"msg":[]}'
			;;
	esac
}

##############################################################################

show_queries() {
	echo '{"result":['

	T=$(logread -e "query\[A\]\|NXDOMAIN" | awk '
$10 ~ /query\[A\]/ && $13 !~ /127.0.0.1/ && $13 !~ /::1/ {gsub(":", "", $4);LINE[$9]=sprintf("\"id\":%d,\"time\":\"%s%02d%02d%s\",\"query\":\"%s\",\"host\":\"%s\",\"nxdomain\":", NR, $5, (match("JanFebMarAprMayJunJulAugSepOctNovDec",$2)+2)/3, $3, $4, $11, $13); NXDOMAIN[$9]="false"}
$13 ~ /NXDOMAIN/ {NXDOMAIN[$9]="true"}
END {for (T in LINE) {printf "{%s%s},\n", LINE[T], NXDOMAIN[T]}}
')
	IPS=$(echo "$T" | sed 's/.*"host":"\(.*\)",.*/\1/g' | sort -u)

	for IP in $IPS; do
		MAC=$(awk '/'$IP'/{print $2}' /tmp/dhcp.leases)
		if [ -n "$MAC" ]; then
			DHCPNAME=$(awk '/'$IP'/{print $4}' /tmp/dhcp.leases)
			[ "x$DHCPNAME" = "x*" ] && DHCPNAME=""
		else
			MAC=$(awk '/'$IP'/{print $4}' /proc/net/arp)
		fi
		if [ -n "$MAC" ]; then
			USERNAME=$(uci -q get easyconfig.m${MAC//:/}.name)
			[ -n "$USERNAME" ] && USERNAME="$(escapeForSed "$USERNAME")"
		fi
		NAME=""
		[ -n "$MAC" ] && NAME=$MAC
		[ -n "$DHCPNAME" ] && NAME=$DHCPNAME
		[ -n "$USERNAME" ] && NAME=$USERNAME
		if [ -n "$NAME" ]; then
			T=$(echo "$T" | sed "s/\"host\":\"$IP\"/\"host\":\"$NAME\"/g")
		fi
	done

	echo "$T"
	echo "]}"
}

##############################################################################

show_wifiscan() {
	echo '{"result":['

	BRIDGE=$(ubus call network.interface.lan status | jsonfilter -e @.l3_device)
	if [ -e /sys/class/net/$BRIDGE/bridge ]; then
		for I in /sys/class/net/$BRIDGE/lower_*; do
			if [ -e $I/phy80211 ]; then
				iw dev ${I##*lower_} scan -u 2>/dev/null | awk 'function abs(value){return (value<0?-value:value)}{gsub("\\(on","");
					if($0 ~ /^BSS.*/) {MAC = $2; wifi_enc[MAC] = ""; wifi_psk[MAC] = 0; wifi_psk2[MAC] = 0; wifi_chan[MAC] = "?"; wifi_mode1[MAC] = ""; wifi_mode2[MAC] = ""; wifi_bssload[MAC] = -1}
					if($1 == "SSID:") {t="";for(i=2;i<=NF-1;++i){t=t$i" "};if(NF<2){t=""}else{t=t$NF}; gsub(/\\/,"\\\\", t); gsub(/"/, "\\\"", t); wifi_ssid[MAC]=t}
					if($1 == "signal:") {wifi_sig[MAC] = $2}
					if($1 == "freq:") {wifi_freq[MAC] = $2; if($2>=5160){wifi_mode1[MAC] = "a"}else{wifi_mode1[MAC] = "g"}}
					if($0 ~ /primary channel:/) {wifi_chan[MAC] = $4}
					if($0 ~ /secondary channel offset: no secondary/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT20"}
					if($0 ~ /secondary channel offset: above/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT40+"}
					if($0 ~ /secondary channel offset: below/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT40-"}
					if($0 ~ /STA channel width: 20 MHz/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT20"}
					if($0 ~ /VHT operation:/) {if(wifi_freq[MAC]>=5160){wifi_mode1[MAC] = "ac"}; wifi_mode2[MAC] = "VHT20"}
					if($0 ~ /center freq segment 1:/) {wifi_vhtch1[MAC] = $6; if($6>0 && wifi_mode2[MAC] != "VHT80" && $6 != wifi_chan[MAC]){wifi_mode2[MAC] = "VHT40"}}
					if($0 ~ /center freq segment 2:/) {wifi_vhtch2[MAC] = $6; if($6>0){if(abs(wifi_vhtch2[MAC] - wifi_vhtch1[MAC]) > 16){wifi_mode2[MAC] = "VHT80+80"}else{wifi_mode2[MAC] = "VHT160"}}}
					if($0 ~ /channel width: 1 \(80 MHz\)/) {wifi_mode2[MAC] = "VHT80"}
					if($0 ~ /HE capabilities:/) {wifi_mode1[MAC] = "ax"; gsub(/VHT|HT/, "HE", wifi_mode2[MAC])}
					if($1 == "capability:") {t=$3; gsub(/\(/,"", t);gsub(/\)/,"", t); if(and(t,16)==16){wifi_enc[MAC] = "WEP"}}
					if($0 ~ /WPA:.*Version: 1/) {wifi_psk[MAC] = 1}
					if($0 ~ /RSN:.*Version: 1/) {wifi_psk2[MAC] = 1}
					if($0 ~ /Authentication suites: PSK/) {if(wifi_psk[MAC] == 1){wifi_enc[MAC] = "WPA Personal"};if(wifi_psk2[MAC] == 1){wifi_enc[MAC] = "WPA2 Personal"};if(wifi_psk[MAC] == 1 && wifi_psk2[MAC] == 1){wifi_enc[MAC] = "WPA/WPA2 Personal"}}
					if($0 ~ /Authentication suites: IEEE 802.1X/) {wifi_enc[MAC] = "WPA2 Enterprise"}
					if($0 ~ /Authentication suites: SAE/) {wifi_enc[MAC] = "WPA3 Personal"}
					if($0 ~ /Authentication suites: PSK SAE/) {wifi_enc[MAC] = "WPA3 Personal"}
					if($0 ~ /Authentication suites: PSK PSK\/SHA-256 SAE/) {wifi_enc[MAC] = "WPA2/WPA3 Personal"}
					if($0 ~ /TSF:/) {wifi_uptime[MAC] = $2/1000}
					if($0 ~ /Unknown IE \(11\):/) {wifi_bssload[MAC] = int("0x"$4) + int("0x"$5)*256}
					} END { for (w in wifi_enc) {
							printf "{\"mac\":\"%s\",\"ssid\":\"%s\",\"freq\":\"%s\",\"signal\":\"%s\",\"channel\":\"%s\",\"encryption\":\"%s\",\"mode1\":\"%s\",\"mode2\":\"%s\",\"vhtch1\":\"%s\",\"vhtch2\":\"%s\",\"uptime\":\"%.0f\",\"bssload\":%d},\n", w, wifi_ssid[w], wifi_freq[w], wifi_sig[w], wifi_chan[w], wifi_enc[w], wifi_mode1[w], wifi_mode2[w], wifi_vhtch1[w], wifi_vhtch2[w], wifi_uptime[w]/1000, wifi_bssload[w]
						}
					}'
			fi
		done
	fi
	echo ']}'
}

##############################################################################

pincode()
{
	read input;
	json_load "$input"
	json_get_vars proto device pincode

	if [ "x$proto" = "x3g" ] || [ "x$proto" = "xncm" ]; then
		PINCODE="$pincode" gcom -d "$device" -s /etc/gcom/setpin.gcom >/dev/null 2>&1
	fi
	if [ "x$proto" = "xqmi" ]; then
		uqmi -d $device --verify-pin1 $pincode >/dev/null 2>&1
	fi
	echo '{}'
}

detect_wan()
{
# modem usb qmi
	T=$(grep qmi_wwan /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$T" ]; then
		F=$(mktemp)
		DEVICE=""
		DEVICES=$(ls /dev/cdc-wdm* 2>/dev/null)
		for D in $DEVICES; do
			echo "" > $F
			(uqmi -s -d $D --get-pin-status > $F) &
			sleep 2
			killall uqmi >/dev/null 2>&1
			if grep -q '"pin1_status"' $F; then
				DEVICE=$D
				break
			fi
			if grep -q '"Not supported"\|"Invalid QMI command"' $F; then
				DEVICE=$D
				break
			fi
		done
		if [ -n "$DEVICE" ]; then
			if grep -q '"pin1_status":"not_verified"' $F; then
				rm $F >/dev/null 2>&1
				echo '{"proto":"qmi","device":"'$DEVICE'","action":"pinrequired"}'
				exit 0
			fi
			rm $F >/dev/null 2>&1
			echo '{"proto":"qmi","device":"'$DEVICE'","apn":"internet"}'
			exit 0
		else
			rm $F >/dev/null 2>&1
		fi
	fi

# modem usb mbim
	T=$(grep cdc_mbim /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$T" ]; then
		DEVICE=$(ls /dev/cdc-wdm* | head -n1)
		echo '{"proto":"mbim","device":"'$DEVICE'","apn":"internet"}'
		exit 0
	fi

# modem usb ncm
	T=$(grep cdc_ncm /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$T" ]; then
		ifdown wan
		DEVICE=""
		DEVICES=$(ls /dev/ttyUSB* /dev/cdc-wdm* 2>/dev/null)
		for D in $DEVICES; do
			O=$(gcom -d $D -s /usr/share/easyconfig/modem/checkext.gcom)
			if echo "$O" | grep -q "SIM PIN"; then
				echo '{"proto":"ncm","device":"'$D'","action":"pinrequired"}'
				exit 0
			fi
			if echo "$O" | grep -q "+CPIN"; then
				DEVICE=$D
				break
			fi
		done
		if [ -n "$DEVICE" ]; then
			APN=$(echo $O | awk -F, '/^\+CGDCONT: 1/{print $3}' | xargs)
			echo '{"proto":"ncm","device":"'$DEVICE'","apn":"'${APN:-internet}'"}'
			exit 0
		fi
	fi

	T=$(echo $(sed 's/^$/######/g' /sys/kernel/debug/usb/devices) | sed 's/######/\n/g' | awk '/Driver=rndis_host/ && /Driver=cdc_acm/')
	if [ -n "$T" ]; then
		ifdown wan
		DEVICE=""
		DEVICES=$(ls /dev/ttyACM* 2>/dev/null)
		for D in $DEVICES; do
			O=$(gcom -d $D -s /usr/share/easyconfig/modem/checkext.gcom)
			if echo "$O" | grep -q "SIM PIN"; then
				echo '{"proto":"ncm","device":"'$D'","action":"pinrequired"}'
				exit 0
			fi
			if echo "$O" | grep -q "+CPIN"; then
				DEVICE=$D
				break
			fi
		done
		if [ -n "$DEVICE" ]; then
			APN=$(echo $O | awk -F, '/^\+CGDCONT: 1/{print $3}' | xargs)
			echo '{"proto":"ncm","device":"'$DEVICE'","apn":"'${APN:-internet}'"}'
			exit 0
		fi
	fi

# modem usb, generic
	T=$(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null)
	if [ -n "$T" ]; then
		ifdown wan
		DEVICE=""
		for D in $T; do
			O=$(gcom -d $D -s /usr/share/easyconfig/modem/checkext.gcom)
			if echo "$O" | grep -q "SIM PIN"; then
				echo '{"proto":"3g","device":"'$D'","action":"pinrequired"}'
				exit 0
			fi
			if echo "$O" | grep -q "+CPIN"; then
				DEVICE=$D
				break
			fi
		done
		if [ -n "$DEVICE" ]; then
			APN=$(echo $O | awk -F, '/^\+CGDCONT: 1/{print $3}' | xargs)
			echo '{"proto":"3g","device":"'$DEVICE'","apn":"'${APN:-internet}'"}'
			exit 0
		fi
	fi

# modem usb hilink or rndis
	T=$(grep -EHi "(cdc ethernet control|rndis communications control)" /sys/class/net/*/device/interface 2>/dev/null | cut -f5 -d/)
	[ -z "$T" ] && T=$(ls -l /sys/class/net/*/device/driver | grep cdc_ether | sed 's!.*/sys/class/net/\(.*\)/device/.*!\1!')
	if [ -n "$T" ]; then
		echo '{"proto":"dhcp_hilink","ifname":"'$T'"}'
		exit 0
	fi

# wan port
	WAN_IFNAME_DEFAULT=""
	WAN_PROTO_DEFAULT=""
	WAN_PORTS_DEFAULT=""
	if [ -e /etc/board.json ]; then
		if $DEVICESECTION; then
			eval $(jsonfilter -i /etc/board.json -e 'WAN_IFNAME_DEFAULT=@.network.wan.device' -e 'WAN_PROTO_DEFAULT=@.network.wan.protocol' -e 'WAN_PORTS_DEFAULT=@.network.wan.ports')
		else
			eval $(jsonfilter -i /etc/board.json -e 'WAN_IFNAME_DEFAULT=@.network.wan.ifname' -e 'WAN_PROTO_DEFAULT=@.network.wan.protocol' -e 'WAN_PORTS_DEFAULT=@.network.wan.ports')
		fi
	fi
	[ -z "$WAN_IFNAME_DEFAULT" ] && [ -n "WAN_PORTS_DEFAULT" ] && WAN_IFNAME_DEFAULT="br-wan"
	if [ "x$WAN_PROTO_DEFAULT" = "xdhcp" ]; then
		if [ -n "$WAN_IFNAME_DEFAULT" ]; then
			echo '{"proto":"dhcp","ifname":"'$WAN_IFNAME_DEFAULT'"}'
			exit 0
		fi
	fi

# none
	echo '{"proto":"none"}'
}

##############################################################################

reboot() {
	if [ -e /tmp/easyconfig_statistics.json ]; then
		touch -d "2000-01-01 00:00:00" /usr/lib/easyconfig/easyconfig_statistics.json.gz
		/usr/bin/easyconfig_statistics.sh
	fi
	sync
	/sbin/reboot
}

##############################################################################

upgrade() {
	read input;
	json_load "$input"
	json_get_vars step arg1 arg2

	# step 2
	if [ "x$step" = "x2" ]; then
		# 4 brak podanego url
		# 5 brak podanego sha256sum
		# 6 nie zgadza się suma kontrolna pobranego pliku

		if [ -z "$arg1" ]; then
			echo '{"error":4}'
			exit 0
		fi
		if [ -z "$arg2" ]; then
			echo '{"error":5}'
			exit 0
		fi

		rm /tmp/sysupgrade.bin >/dev/null 2>&1
		wget -q -T 3 -O /tmp/sysupgrade.bin "$arg1"
		T=$(sha256sum /tmp/sysupgrade.bin | awk '{print $1}')
		if [ "x$T" = "x$arg2" ]; then
			sync
			echo "{\"sha256sum\":\"$arg2\"}"
		else
			rm /tmp/sysupgrade.bin >/dev/null 2>&1
			echo '{"error":6}'
		fi
		exit 0
	fi

	# step 3
	if [ "x$step" = "x3" ]; then
		# 7 brak podanego sha256sum
		# 8 brak pliku do aktualizacji
		# 9 nie zgadza się suma kontrolna pobranego pliku

		if [ -z "$arg1" ]; then
			echo '{"error":7}'
			exit 0
		fi
		[ "x$arg2" = "x1" ] && PS="" || PS="-n"

		if [ ! -e /tmp/sysupgrade.bin ]; then
			echo '{"error":8}'
			exit 0
		fi

		T=$(sha256sum /tmp/sysupgrade.bin | awk '{print $1}')
		if [ "x$T" = "x$arg1" ]; then
			sync
			sysupgrade $PS /tmp/sysupgrade.bin
			echo '{"upgrade":"ok"}'
		else
			rm /tmp/sysupgrade.bin >/dev/null 2>&1
			echo '{"error":9}'
		fi
		exit 0
	fi

	# step 1
	# 1 nie można pobrać pliku z danymi
	# 2 nie można znaleźć pliku z firmware
	# 3 nie ma innej wersji

	FSUMS=/tmp/upgrade-sha256sums

	ARCH=$(awk -F[\'/] '/DISTRIB_TARGET/{print $2}' /etc/openwrt_release)
	URL="http://dl.eko.one.pl/mifi/$ARCH"
	wget -q -T 3 -O $FSUMS $URL/sha256sums
	if [ ! -s $FSUMS ]; then
		rm $FSUMS >/dev/null 2>&1
		echo '{"error":1}'
		exit 0
	fi

	if [ "$ARCH" = "x86" ]; then
		FS=$(ubus call system board | jsonfilter -e '@.rootfs_type')
		if [ -e /sys/firmware/efi ]; then
			EFI="-efi"
		else
			EFI=""
		fi
		BOARD="x86-64-generic-${FS}-combined${EFI}.img"
		T=$(grep -E "mifi.*$BOARD" $FSUMS | tail -n1)
	else
		BOARD=$(sed 's/,/_/g' /tmp/sysinfo/board_name)
		T=$(grep -E "mifi.*$BOARD.*sysupgrade" $FSUMS | tail -n1)
	fi
	rm $FSUMS >/dev/null 2>&1
	if [ -z "$T" ]; then
		echo '{"error":2}'
		exit 0
	fi

	CHECKSUM=$(echo "$T" | awk '{print $1}')
	FILE=$(echo "$T" | awk '{print $2}')

	OLD_BUILD=$(awk -F\' '/DISTRIB_REVISION/{print $2}' /etc/openwrt_release)
	NEW_BUILD=$(echo $FILE | sed 's|.*-\(r[0-9]*-.*\)-'$BOARD'.*|\1|g')

	if [ "x$OLD_BUILD" = "x$NEW_BUILD" ]; then
		echo '{"error":3}'
		exit 0
	fi
	echo "{\"version\":\"$NEW_BUILD\",\"url\":\"$URL/$FILE\",\"sha256sum\":\"$CHECKSUM\"}"
}

##############################################################################

show_vpn_up()
{
	echo '{"result":['

	if [ -e /etc/config/zerotier ]; then
		LN=$(zerotier-cli -j listnetworks)
		ZTS=$(uci show zerotier | awk -F[.=] '/=zerotier/{print $2}')
		for ZT in $ZTS; do
			UP="false"
			JOINS=$(uci get zerotier.$ZT.join)
			for JOIN in $JOINS; do
				T=$(echo "$LN" | jsonfilter -q -e '@[@.id="'$JOIN'"].status')
				[ "x$T" = "xOK" ] && UP="true"
			done
			echo "{\"interface\":\"\",\"section\":\"$ZT\",\"up\":${UP:-false}},"
		done
	fi

	T=$(ubus call network.interface dump)
	INTERFACES=$(echo "$T" | jsonfilter -q -e '@.interface[@.proto="pptp" || @.proto="sstp" || @.proto="wireguard"].interface')

	if [ -e /etc/config/openvpn ]; then
		OVPNS=$(uci show openvpn | awk -F[.=] '/\.config=/{print $2}')
		for OVPN in $OVPNS; do
			INTERFACE=""
			TUN=$(uci -q get openvpn.$OVPN.dev)
			[ -z "$TUN" ] && TUN=$(awk '/^tun/{print $2}' $(uci -q get openvpn.$OVPN.config) 2>/dev/null)
			[ -n "$TUN" ] && INTERFACE=$(uci show network | awk -F. '/device='\'''${TUN}''\''$/{print $2}')
			if [ -n "$INTERFACE" ]; then
				INTERFACES="${INTERFACES} ${INTERFACE}:openvpn:${OVPN}"
			else
				UP="false"
				if [ -n "$TUN" ]; then
					[ -e /sys/class/net/$TUN ] && UP="true"
				fi
				echo "{\"interface\":\"\",\"section\":\"$OVPN\",\"up\":${UP:-false}},"
			fi
		done
	fi

	for INTERFACE in $INTERFACES; do
		if echo "$INTERFACE" | grep -q ":"; then
			INTERFACE=$(echo "$INTERFACE" | cut -f1 -d:)
		fi
		UP=$(echo "$T" | jsonfilter -q -e '@.interface[@.interface="'$INTERFACE'"].up')
		echo "{\"interface\":\"$INTERFACE\",\"up\":${UP:-false}},"
	done
	echo "]}"
}

show_vpn()
{
	echo '{"result":['

	if [ -e /etc/config/zerotier ]; then
		LN=$(zerotier-cli -j listnetworks)
		ZTS=$(uci show zerotier | awk -F[.=] '/=zerotier/{print $2}')
		for ZT in $ZTS; do
			NAME=$(uci -q get zerotier.$ZT.name)
			UP="false"
			PENDING="false"
			JOINS=$(uci get zerotier.$ZT.join)
			for JOIN in $JOINS; do
				T=$(echo "$LN" | jsonfilter -q -e '@[@.id="'$JOIN'"].status')
				[ "x$T" = "xOK" ] && UP="true"
				[ "x$T" = "xREQUESTING_CONFIGURATION" ] && PENDING="true"
			done
			echo "{\"interface\":\"\",\"section\":\"$ZT\",\"up\":${UP:-false},\"pending\":${PENDING:-false},\"uptime\":\"\",\"uptime_since\":\"\",\"proto\":\"zerotier\",\"name\":\""$(escapeJSON "${NAME:-$ZT}")"\"},"
		done
	fi

	T=$(ubus call network.interface dump)
	INTERFACES=$(echo "$T" | jsonfilter -q -e '@.interface[@.proto="pptp" || @.proto="sstp" || @.proto="wireguard"].interface')

	if [ -e /etc/config/openvpn ]; then
		OVPNS=$(uci show openvpn | awk -F[.=] '/\.config=/{print $2}')
		for OVPN in $OVPNS; do
			INTERFACE=""
			TUN=$(uci -q get openvpn.$OVPN.dev)
			NAME=$(uci -q get openvpn.$OVPN.name)
			[ -z "$TUN" ] && TUN=$(awk '/^tun/{print $2}' $(uci -q get openvpn.$OVPN.config) 2>/dev/null)
			[ -n "$TUN" ] && INTERFACE=$(uci show network | awk -F. '/device='\'''${TUN}''\''$/{print $2}')
			if [ -n "$INTERFACE" ]; then
				INTERFACES="${INTERFACES} ${INTERFACE}:openvpn:${OVPN}"
			else
				[ -z "$NAME" ] && NAME=$OVPN
				UP="false"
				if [ -n "$TUN" ]; then
					[ -e /sys/class/net/$TUN ] && UP="true"
				fi
				echo "{\"interface\":\"\",\"section\":\"$OVPN\",\"up\":${UP:-false},\"pending\":false,\"uptime\":\"\",\"uptime_since\":\"\",\"proto\":\"openvpn\",\"name\":\""$(escapeJSON "$NAME")"\"},"
			fi
		done
	fi

	for INTERFACE in $INTERFACES; do
		if echo "$INTERFACE" | grep -q ":"; then
			TPROTO=$(echo "$INTERFACE" | cut -f2 -d:)
			SEC=$(echo "$INTERFACE" | cut -f3 -d:)
			INTERFACE=$(echo "$INTERFACE" | cut -f1 -d:)
		fi
		UP=$(echo "$T" | jsonfilter -q -e '@.interface[@.interface="'$INTERFACE'"].up')
		UPTIME=""
		UPTIME_SINCE=""
		if [ "x$UP" = "xtrue" ]; then
			UPTIME=$(echo "$T" | jsonfilter -q -e '@.interface[@.interface="'$INTERFACE'"].uptime')
			if $TIMEISVALID; then
				UPTIME_SINCE=$(date "+%Y%m%d%H%M" -d "@$(($(date +%s) - UPTIME))")
			else
				UPTIME_SINCE=""
			fi
		fi
		PENDING=$(echo "$T" | jsonfilter -q -e '@.interface[@.interface="'$INTERFACE'"].pending')
		PROTO=$(echo "$T" | jsonfilter -q -e '@.interface[@.interface="'$INTERFACE'"].proto')
		if [ "x$PROTO" = "xnone" ]; then
			[ -n "$TPROTO" ] && PROTO=$TPROTO
		fi
		CUSTOM=""
		case $PROTO in
			"openvpn")
				NAME=$(uci -q get openvpn.$SEC.name)
				CUSTOM=",\"section\":\"$SEC\""
				;;
			"pptp" | "sstp")
				NAME=$(uci -q get network.$INTERFACE.name)
				[ -z "$NAME" ] && NAME=$(uci -q get network.$INTERFACE.server)
				;;
			"wireguard")
				PEERS=$(uci show network | awk -F[.=] '/=wireguard_'$INTERFACE'/{print $2}')
				NAME=""
				for PEER in $PEERS; do
					T1=$(uci -q get network.$PEER.description)
					[ -z "$T1" ] && T1="$(uci -q get network.$PEER.endpoint_host):$(uci -q get network.$PEER.endpoint_port)"
					[ -n "$NAME" ] && NAME="${NAME},"
					NAME="${NAME}${T1}"
				done
				;;
		esac
		echo "{\"interface\":\"$INTERFACE\"${CUSTOM},\"up\":${UP:-false},\"pending\":${PENDING:-false},\"uptime\":\"$UPTIME\",\"uptime_since\":\"$UPTIME_SINCE\",\"proto\":\"$PROTO\",\"name\":\""$(escapeJSON "${NAME:-$INTERFACE}")"\"},"
	done
	echo "]"

	T=""
	RULES=$(uci show firewall | awk -F. '/\.src='\''lan'\''$/{print $2}')
	for RULE in $RULES; do
		T2=$(uci -q get firewall.${RULE}.dest)
		if [ "x$T2" = "xwan" ]; then
			T2=$(uci -q get firewall.$RULE)
			if [ "x$T2" = "xforwarding" ]; then
				T="$RULE"
				break
			fi
		fi
	done
	echo ',"wan_lanto":"'$T'"}'
}

show_vpn_status()
{
	read input;
	json_load "$input"
	json_get_vars interface

	json_load "$(ubus call network.interface.$interface status)"
	json_get_var PROTO proto
	json_get_var UPTIME uptime
	json_get_var IFNAME l3_device

	. /lib/functions/network.sh
	network_get_ipaddr IPADDR $interface
	if [ -z "$IPADDR" ]; then
		[ -n "$IFNAME" ] && IPADDR=$(ifconfig $IFNAME | awk '/inet addr:/{gsub(":"," ");print $3}')
	fi

	if [ -n "$UPTIME" ]; then
		if $TIMEISVALID; then
			UPTIME_SINCE=$(date "+%Y%m%d%H%M" -d "@$(($(date +%s) - UPTIME))")
		fi
	fi

	if [ -n "$IFNAME" ]; then
		RX=$(cat /sys/class/net/$IFNAME/statistics/rx_bytes)
		TX=$(cat /sys/class/net/$IFNAME/statistics/tx_bytes)
	fi

	echo "{"
	echo '"proto":"'$PROTO'",'
	echo '"rx":"'$RX'",'
	echo '"tx":"'$TX'",'
	echo '"uptime_since":"'$UPTIME_SINCE'",'
	echo '"uptime":"'$UPTIME'",'
	echo '"ipaddr":"'$IPADDR'"'

	if [ "x$PROTO" = "xwireguard" ]; then
		echo ',"peers":['
		T=$(wg show $interface dump 2>/dev/null)
		PEERS=$(uci show network | awk -F[.=] '/=wireguard_'$interface'/{print $2}')
		for PEER in $PEERS; do
			PUBKEY=$(uci -q get network.$PEER.public_key)
			T1=$(echo "$T" | awk '/^'$(escapeForSed $PUBKEY)'/{print $5}')
			NOW=$(date +%s)
			HANDSHAKE_AGO=""
			HANDSHAKE=""
			[ -n "$T1" ] && HANDSHAKE_AGO=$((NOW - T1))
			[ -n "$T1" ] && HANDSHAKE=$(date -d @${T1} +%Y%m%d%H%M%S)
			RX=$(echo "$T" | awk '/^'$(escapeForSed $PUBKEY)'/{print $6}')
			TX=$(echo "$T" | awk '/^'$(escapeForSed $PUBKEY)'/{print $7}')
			NAME=$(uci -q get network.$PEER.description)
			[ -z "$NAME" ] && NAME="$(uci -q get network.$PEER.endpoint_host):$(uci -q get network.$PEER.endpoint_port)"
			echo "{\"name\":\""$(escapeJSON "$NAME")"\",\"handshake_ago\":\"${HANDSHAKE_AGO}\",\"handshake\":\"$HANDSHAKE\",\"rx\":\"$RX\",\"tx\":\"$TX\"},"
		done
		echo "]"
	fi
	echo "}"
}

show_vpn_status_zerotier()
{
	read input;
	json_load "$input"
	json_get_vars section

	echo "{\"networks\":["

	LN=$(zerotier-cli -j listnetworks)
	JOINS=$(uci -q get zerotier.$section.join)
	for JOIN in $JOINS; do
		IPADDR=""
		NAME=""
		STATUS=""
		TYPE=""
		eval $(echo "$LN" | jsonfilter -q -e 'IPADDR=@[@.id="'$JOIN'"].assignedAddresses[0]' -e 'NAME=@[@.id="'$JOIN'"].name' -e 'STATUS=@[@.id="'$JOIN'"].status' -e 'TYPE=@[@.id="'$JOIN'"].type')
		echo "{\"id\":\"$JOIN\",\"name\":\""$(escapeJSON "$NAME")"\",\"ipaddr\":\"$IPADDR\",\"status\":\"$STATUS\",\"type\":\"$TYPE\"},"
	done
	echo "]}"
}

show_vpn_details()
{
	read input;
	json_load "$input"
	json_get_vars proto interface section

	if [ -n "$interface" ]; then
		[ "x$(uci -q get firewall.f1${interface})" = "xforwarding" ] && LANTO=1
		[ "x$(uci -q get easyconfig.vpn.interface)" = "x$interface" ] && BUTTON="true"
		AUTOSTART=$(uci -q get network.$interface.auto)
		TRIGGER=$(uci -q get network.$interface.trigger)
		PROTO=$(uci -q get network.$interface.proto)
		if [ "x$proto" = "xopenvpn" ]; then
			AUTOSTART=$(uci -q get openvpn.$section.enabled)
			TRIGGER=$(uci -q get openvpn.$section.trigger)
			PROTO="openvpn"
		fi
	else
		if [ "x$proto" = "xopenvpn" ]; then
			LANTO=0
			BUTTON="false"
			AUTOSTART=$(uci -q get openvpn.$section.enabled)
			TRIGGER=$(uci -q get openvpn.$section.trigger)
			PROTO="openvpn"
		fi
		if [ "x$proto" = "xzerotier" ]; then
			LANTO=0
			BUTTON="false"
			AUTOSTART="0"
			TRIGGER=""
			PROTO="zerotier"
		fi
	fi
	echo "{\"proto\":\"$PROTO\",\"autostart\":${AUTOSTART:-1},\"button\":${BUTTON:-false},\"lanto\":${LANTO:-0},\"trigger\":\"$TRIGGER\","
	if [ "x$PROTO" = "xopenvpn" ]; then
		NAME=$(uci -q get openvpn.$section.name)
		if [ -z "$NAME" ]; then
			if [ -n "$interface" ]; then
				NAME=$interface
			else
				NAME=$section
			fi
		fi
		USERNAME=$(uci -q get openvpn.$section.username)
		PASSWORD=$(uci -q get openvpn.$section.password)
		json_init
		json_add_string config "$(escapeJSON "$(cat $(uci -q get openvpn.$section.config) 2>/dev/null)")"
		json_get_vars config
		echo "\"section\":\"$section\",\"name\":\""$(escapeJSON "${NAME}")"\",\"username\":\""$(escapeJSON "$USERNAME")"\",\"password\":\""$(escapeJSON "$PASSWORD")"\",\"configtext\":\"$config\"}"
	fi
	if [ "x$PROTO" = "xpptp" ]; then
		NAME=$(uci -q get network.$interface.name)
		SERVER=$(uci -q get network.$interface.server)
		USERNAME=$(uci -q get network.$interface.username)
		PASSWORD=$(uci -q get network.$interface.password)
		MPPE=$(uci -q get network.$interface.pppd_options | grep -q "nomppe" && echo "0" || echo "1")
		echo "\"name\":\""$(escapeJSON "$NAME")"\",\"server\":\"$SERVER\",\"username\":\""$(escapeJSON "$USERNAME")"\",\"password\":\""$(escapeJSON "$PASSWORD")"\",\"mppe\":${MPPE:-1}}"
	fi
	if [ "x$PROTO" = "xsstp" ]; then
		NAME=$(uci -q get network.$interface.name)
		SERVER=$(uci -q get network.$interface.server)
		USERNAME=$(uci -q get network.$interface.username)
		PASSWORD=$(uci -q get network.$interface.password)
		echo "\"name\":\""$(escapeJSON "$NAME")"\",\"server\":\"$SERVER\",\"username\":\""$(escapeJSON "$USERNAME")"\",\"password\":\""$(escapeJSON "$PASSWORD")"\"}"
	fi
	if [ "x$PROTO" = "xwireguard" ]; then
		PRIVKEY=$(uci -q get network.$interface.private_key)
		PUBKEY=$(echo "$PRIVKEY" | wg pubkey)
		IPS=$(uci -q get network.$interface.addresses | sed 's/ /","/g')
		PORT=$(uci -q get network.$interface.listen_port)
		PEERS=$(uci show network | awk -F[.=] '/=wireguard_'$interface'/{print $2}')
		echo "\"privkey\":\"$PRIVKEY\",\"pubkey\":\"$PUBKEY\",\"listen_port\":\"$PORT\",\"ips\":[\"$IPS\"],\"peers\":["
		for PEER in $PEERS; do
			DISABLED=$(uci -q get network.$PEER.disabled)
			ENDPOINTHOST=$(uci -q get network.$PEER.endpoint_host)
			ENDPOINTPORT=$(uci -q get network.$PEER.endpoint_port)
			PUBKEY=$(uci -q get network.$PEER.public_key)
			PSKEY=$(uci -q get network.$PEER.preshared_key)
			DESCRIPTION=$(uci -q get network.$PEER.description)
			[ -z "$DESCRIPTION" ] && DESCRIPTION="$ENDPOINTHOST:$ENDPOINTPORT"
			ALLOWEDIPS=$(uci -q get network.$PEER.allowed_ips | sed 's/ /","/g')
			echo "{\"disabled\":${DISABLED:-0},\"description\":\""$(escapeJSON "$DESCRIPTION")"\",\"pubkey\":\"$PUBKEY\",\"pskey\":\"$PSKEY\",\"endpoint_host\":\"$ENDPOINTHOST\",\"endpoint_port\":\"$ENDPOINTPORT\",\"allowed_ips\":[\"$ALLOWEDIPS\"]},"
		done
		echo "]}"
	fi
	if [ "x$PROTO" = "xzerotier" ]; then
		ZTS=$(uci show zerotier | awk -F[.=] '/'$section'=zerotier/{print $2}')
		for ZT in $ZTS; do
			NAME=$(uci -q get zerotier.$ZT.name)
			ENABLED=$(uci -q get zerotier.$ZT.enabled)
			JOINS=$(uci -q get zerotier.$ZT.join | sed 's/ /","/g')
			echo "\"name\":\""$(escapeJSON "${NAME:-$section}")"\",\"enabled\":${ENABLED:-0},\"join\":[\"$JOINS\"]}"
		done
	fi
}

get_wireguard_keys()
{
	read input;
	json_load "$input"
	json_get_vars privkey
	[ "x$privkey" = "xgenkeys" ] && privkey=$(wg genkey)
	PUBKEY=$(echo "$privkey" | wg pubkey)
	echo "{\"privkey\":\"$privkey\",\"pubkey\":\"$PUBKEY\"}"
}

##############################################################################

show_geolocation()
{
	T=$(wget -q -T 3 -O - http://ip-api.com/json/?fields=country,regionName,city,isp,status,query,lat,lon)
	if [ -z "$T" ]; then
		echo '{"status":"fail"}'
	else
		echo $T
	fi
}

##############################################################################

adblock_bwlist()
{
	json_add_array blacklist
	F=$(uci -q get adblock.blacklist.adb_src)
	[ -z "$F" ] && F=/etc/adblock/adblock.blacklist
	if [ -s "$F" ]; then
		while read line; do
			json_add_string "" "$line"
		done < $F
	fi
	json_close_array

	json_add_array whitelist
	F=/etc/adblock/adblock.whitelist
	if [ -s "$F" ]; then
		while read line; do
			json_add_string "" "$line"
		done < $F
	fi
	json_close_array
}

show_adblock()
{
	if [ ! -e /etc/init.d/adblock ]; then
		json_init
		/etc/init.d/easyconfig_adblock enabled && json_add_boolean "enabled" 1 || json_add_boolean "enabled" 0
		T=$(uci -q get firewall.dns_53_redirect)
		[ "x$T" = "xredirect" ] && FORCEDNS="1" || FORCEDNS="0"
		json_add_boolean "forcedns" $FORCEDNS
		adblock_bwlist
		json_dump
		exit 0
	fi

	LISTS=""
	if [ -e /etc/adblock/adblock.sources.gz ]; then
		json_load "$(zcat /etc/adblock/adblock.sources.gz)"
		json_get_keys keylist
		for key in ${keylist}; do
			json_select "${key}"
			json_get_vars size descurl focus
			uci -q get adblock.global.adb_sources | grep -q ${key} && ENABLED=1 || ENABLED=0
			json_select ..
			[ -n "$LISTS" ] && LISTS="${LISTS},"
			LISTS="${LISTS}{\"section\":\"${key}\",\"enabled\":${ENABLED},\"size\":\"${size}\",\"descurl\":\"${descurl}\",\"focus\":\"${focus}\"}"
		done
	fi
	ENABLED=$(uci -q get adblock.global.adb_enabled)
	T=$(uci -q get firewall.dns_53_redirect)
	[ "x$T" = "xredirect" ] && FORCEDNS="1" || FORCEDNS="0"

	rtfile="$(uci -q get adblock.extra.adb_rtfile)"
	rtfile="${rtfile:-"/tmp/adb_runtime.json"}"
	if [ -s "$rtfile" ]; then
		json_load "$(cat "${rtfile}" 2>/dev/null)"
		if json_is_a "data" object; then
			json_select data
		fi
		json_get_var STATUS adblock_status
		if [ -e /etc/adblock/adblock.sources.gz ]; then
			json_get_var DOMAINS blocked_domains
		else
			json_get_var DOMAINS overall_domains
			DOMAINS=${DOMAINS%% *}
		fi
	fi

	json_init
	json_add_boolean "enabled" $ENABLED
	json_add_boolean "forcedns" $FORCEDNS
	json_add_string "domains" "$DOMAINS"
	json_add_string "status" "$STATUS"
	eval "$(jshn -r "{'lists':[${LISTS}]}" | grep -v json_init)"

	adblock_bwlist
	json_dump
}

##############################################################################

show_nightmode()
{
	echo '{'
	[ -e /etc/crontabs/root ] && T=$(grep easyconfig_nightmode /etc/crontabs/root)
	if [ -n "$T" ]; then
		echo '"enabled": true,'
	else
		echo '"enabled": false,'
	fi
	LAT=$(uci -q get easyconfig.global.latitude)
	LON=$(uci -q get easyconfig.global.longitude)
	echo '"latitude":"'$LAT'",'
	echo '"longitude":"'$LON'",'
	SUNRISE=""
	SUNSET=""
	if [ -n "$LAT" ] && [ -n "$LON" ]; then
		[ "x${LAT:0:1}" = "x-" ] && LAT="${LAT:1}S" || LAT="${LAT}N"
		[ "x${LON:0:1}" = "x-" ] && LON="${LON:1}W" || LON="${LON}.E"
		if [ -e /usr/bin/sunwait ]; then
			T=$(sunwait -p $LAT $LON)
			SUNRISE=$(echo "$T" | awk '/Sun rises/{print $3}')
			SUNSET=$(echo "$T" | awk '/Sun rises/{print $6}')
			SUNRISE="${SUNRISE:0:2}:${SUNRISE:2:2}"
			SUNSET="${SUNSET:0:2}:${SUNSET:2:2}"
		fi
	fi
	echo '"sunrise":"'$SUNRISE'",'
	echo '"sunset":"'$SUNSET'"'
	echo '}'
}

##############################################################################

leds() {
	read input;
	json_load "$input"
	json_get_vars action
	if [ "x$action" = "xoff" ]; then
		for i in /sys/class/leds/*:*; do
		echo none > $i/trigger
		echo 0 > $i/brightness
		done
		touch /tmp/led_off
		[ -e /etc/easyconfig_leds.user ] && env -i ACTION="off" /bin/sh /etc/easyconfig_leds.user
	else
		rm /tmp/led_off 2>/dev/null
		/etc/init.d/led start >/dev/null 2>&1
		. /etc/diag.sh
		set_state done

		BASE="/sys/firmware/devicetree/base/leds"
		if [ -e "$BASE" ]; then
			for i in $BASE/*; do
				if [ -e "$i/linux,default-trigger" ]; then
					LED="/sys/class/leds/"$(cat $i/label)"/trigger"
					TRIGGER=$(cat $i/linux,default-trigger)
					echo $TRIGGER > $LED
				fi
			done
		fi
		[ -e /etc/easyconfig_leds.user ] && env -i ACTION="on" /bin/sh /etc/easyconfig_leds.user
	fi
	echo '{"response":"done"}'
}

##############################################################################

show_wol() {
	echo '{"result":['
	T=$(uci show easyconfig | awk -F[=.] '/=wol/{print $2}')
	for i in $T; do
		echo '{'
		echo '"section":"'${i}'",'
		echo '"description":"'$(escapeJSON "$(uci -q get easyconfig.$i.description)")'",'
		echo '"mac":"'$(uci -q get easyconfig.$i.mac)'",'
		echo '"broadcast":'$(uci -q get easyconfig.$i.broadcast)','
		echo '"button":'$(uci -q get easyconfig.$i.button)
		echo '},'
	done
	echo ']}'
}

wolwakeup() {
	read input;
	json_load "$input"
	json_get_vars section
	if [ -n "$section" ]; then
		if [ "$section" = "all" ]; then
			T=$(uci show easyconfig | awk -F[=.] '/=wol/{print $2}')
		else
			T="$section"
		fi
		for i in $T; do
			mac=$(uci -q get easyconfig.$i.mac)
			if [ -n "$mac" ]; then
				broadcast=$(uci -q get easyconfig.$i.broadcast)
				if [ "x$broadcast" = "x1" ]; then
					/usr/bin/etherwake -b -i br-lan "$mac"
				else
					/usr/bin/etherwake -i br-lan "$mac"
				fi
			fi
		done
	fi
	echo "{}"
}

##############################################################################

show_networks() {
	echo '{'

	LANDEVICE=$(uci get network.lan.device)
	LANBRIDGE=$(uci show network | awk -F. '/\.name='\'''$LANDEVICE''\''/{print $2}')

	T=$(jsonfilter -i /etc/board.json -e '@.network.lan.ports' | jsonfilter -q -e '@.*')
	[ -z "$T" ] && T=$(jsonfilter -i /etc/board.json -e '@.network.lan.device')
	echo '"ports":['
	if [ ! -e /sbin/swconfig ]; then
		for PORT in $T; do
			NETWORK=""
			DESCRIPTION=""
			BRIDGE=$(uci show network | awk -F. '/'\'''$PORT''\''/{print $2}')
			if [ -n "$BRIDGE" ]; then
				DEVICE=$(uci -q get network.$BRIDGE.name)
				if [ -n "$DEVICE" ]; then
					NETWORK=$(uci show network | awk -F. '/\.device='\'''$DEVICE''\''/{print $2}')
					[ -n "$NETWORK" ] && DESCRIPTION=$(escapeJSON "$(uci -q get network.$NETWORK.description)")
				fi
			fi
			echo '{"port":"'$PORT'","network":"'$NETWORK'","bridge":"'$BRIDGE'","description":"'$DESCRIPTION'","lanbridge":"'$LANBRIDGE'"},'
		done
	fi
	echo '],'
	echo '"networks":['
	NETWORKS=$(uci show network | awk -F. '/\.proto='\''static'\''/{print $2}')
	for SEC in $NETWORKS; do
		[ "$SEC" = "lan" ] && continue
		[ "$SEC" = "loopback" ] && continue
		[ "$SEC" = "wan" ] && continue
		[ "$SEC" = "wan6" ] && continue
		echo '{"section":"'$SEC'",'
		echo '"description":"'$(escapeJSON "$(uci -q get network.$SEC.description)")'",'
		echo '"proto":"'$(uci -q get network.$SEC.proto)'",'
		echo '"ipaddr":"'$(uci -q get network.$SEC.ipaddr)'",'
		echo '"netmask":"'$(uci -q get network.$SEC.netmask)'",'
		T=$(uci -q get network.$SEC.device)
		echo '"device":"'$T'",'
		BRIDGE=""
		T1=$(uci show network | awk -F. '/\.name='\'''$T''\''$/{print $2}')
		[ -n "$T1" ] && [ "x$(uci -q get network.$T1.type)" = "xbridge" ] && BRIDGE=$T1
		echo '"bridge":"'$BRIDGE'",'
		T=$(uci show firewall | awk -F. '/\.network='\'''$SEC''\''$/{print $2}')
		echo '"zone":"'$T'",'
		echo '"forwarding":['
		RULES=$(uci show firewall | awk -F. '/\.src='\'''$SEC''\''$/{print $2}')
		for RULE in $RULES; do
			if [ "x$(uci -q get firewall.${RULE})" = "xforwarding" ]; then
				echo '{"'$(uci -q get firewall.${RULE}.dest)'":"'${RULE}'"},'
			fi
		done
		echo '],'
		DHCP="1"
		T=$(uci -q get dhcp.$SEC.ignore)
		[ "x$T" = "x1" ] && DHCP=0
		echo '"dhcp":'$DHCP','
		echo '"wireless":['

		RADIOS=$(uci -q show wireless | awk -F. '/type=/{print $2}')
		for R in $RADIOS; do
			echo '{"'$R'":{'
			WLAN_DISABLED_RADIO=$(uci -q get wireless.$R.disabled)
			T=$(uci -q show wireless | awk -F. '/device='\'''${R}''\''$/{print $2}')
			WLAN_DISABLED=1
			WLAN_SSID=""
			WLAN_ENCRYPTION="psk2"
			WLAN_KEY=""
			WLAN_ISOLATE=0
			WLAN_HIDDEN=0
			WLAN_MACADDR=""
			WLAN_SEC=""
			if [ -n "$T" ]; then
				for T1 in $T; do
					[ "x$(uci -q get wireless.$T1.network)" = "x$SEC" ] || continue
					[ "x$(uci -q get wireless.$T1.mode)" = "xap" ] || continue
					WLAN_SEC=$T1
					WLAN_SSID=$(uci -q get wireless.$WLAN_SEC.ssid)
					WLAN_ENCRYPTION=$(uci -q get wireless.$WLAN_SEC.encryption)
					WLAN_KEY=$(uci -q get wireless.$WLAN_SEC.key)
					WLAN_DISABLED=$(uci -q get wireless.$WLAN_SEC.disabled)
					WLAN_ISOLATE=$(uci -q get wireless.$WLAN_SEC.isolate)
					WLAN_HIDDEN=$(uci -q get wireless.$WLAN_SEC.hidden)
					WLAN_MACADDR=$(uci -q get wireless.$WLAN_SEC.macaddr)
					break
				done
				[ -z "$WLAN_SSID" ] && WLAN_DISABLED=1
			fi
			echo '"radio_disabled":'${WLAN_DISABLED_RADIO:-0}','
			echo '"disabled":'${WLAN_DISABLED:-0}','
			echo '"ssid":"'$(escapeJSON "$WLAN_SSID")'",'
			echo '"encryption":"'$WLAN_ENCRYPTION'",'
			echo '"key":"'$(escapeJSON "$WLAN_KEY")'",'
			echo '"isolate":'${WLAN_ISOLATE:-0}','
			echo '"hidden":'${WLAN_HIDDEN:-0}','
			echo '"macaddr":"'$WLAN_MACADDR'",'
			echo '"section":"'$WLAN_SEC'"'
			echo '}},'
		done

		echo '],'
		BRIDGE=$(ubus call network.interface.$SEC status | jsonfilter -e @.l3_device)
		T=$(uci show network | awk -F. '/\.name='\'''$BRIDGE''\''/{print $2}')
		TPORTS=""
		if [ -n "$T" ]; then
			TPORTS=$(uci -q get network.$T.ports)
			[ -n "$TPORTS" ] && TPORTS='"'$(echo $TPORTS | sed 's/ /","/g')'"'
		fi
		echo '"wire":['${TPORTS}'],'
		WLAN_CLIENTS=0
		LAN_CLIENTS=0
		if [ -e /sys/class/net/$BRIDGE/bridge ]; then
			T=$(brctl showmacs $BRIDGE 2>/dev/null)
			for I in /sys/class/net/$BRIDGE/lower_*; do
				IFNAME=${I##*lower_}
				if [ -e $I/phy80211 ]; then
					CNT=$(iw dev $IFNAME station dump | grep -c Station)
					WLAN_CLIENTS=$((WLAN_CLIENTS+CNT))
				else
					if [ -e /sys/class/net/$BRIDGE/brif/$IFNAME/port_no ]; then
						PORTID=$(printf "%d" $(cat /sys/class/net/$BRIDGE/brif/$IFNAME/port_no))
						CNT=$(echo "$T" | awk '/^\s*'$PORTID'\s.*no/{print $2}' | wc -l)
						LAN_CLIENTS=$((LAN_CLIENTS+CNT))
					fi
				fi
			done
		fi
		echo '"wlan_clients":'$WLAN_CLIENTS','
		echo '"lan_clients":'$LAN_CLIENTS
		echo '},'
	done
	echo ']}'
}

##############################################################################

case "$1" in
	list)
		echo '{'
		echo '"status":{},'
		echo '"config":{},'
		echo '"networks":{},'
		echo '"system":{},'
		echo '"watchdog":{},'
		echo '"clients":{},'
		echo '"clientslogs":{},'
		echo '"clientstatistics":{"mac":"string"},'
		echo '"clientbandwidth":{"mac":"string","section":"string"},'
		echo '"traffic":{},'
		echo '"modem":{},'
		echo '"modemsettings":{},'
		echo '"modeminfo":{},'
		echo '"setsimslot":{"slot":"string"},'
		echo '"ussd":{"code":"string"},'
		echo '"ussdshortcuts":{},'
		echo '"sms":{"action":"string","arg1":"string","arg2":"string"},'
		echo '"queries":{},'
		echo '"wifiscan":{},'
		echo '"detect_wan":{},'
		echo '"pincode":{"proto":"string","device":"string","pincode":"string"},'
		echo '"reboot":{},'
		echo '"upgrade":{"step":"string","arg1":"string","arg2":"string"},'
		echo '"vpn":{}',
		echo '"vpnstatus":{"interface":"string"}',
		echo '"vpnstatuszerotier":{"section":"string"}',
		echo '"vpndetails":{"proto":"string","interface":"string","section":"string"}',
		echo '"getwireguardkeys":{"privkey":"string"}',
		echo '"geolocation":{},'
		echo '"adblock":{},'
		echo '"nightmode":{},'
		echo '"leds":{"action":"string"}',
		echo '"wol":{}',
		echo '"wolwakeup":{"section":"string"}'
		echo '}'
	;;
	call)
		case "$2" in
			status)
				show_status
				;;
			config)
				show_config
				;;
			networks)
				show_networks
				;;
			system)
				show_system
				;;
			watchdog)
				show_watchdog
				;;
			clients)
				show_clients
				;;
			clientslogs)
				show_clientslogs
				;;
			clientstatistics)
				show_clientstatistics
				;;
			clientbandwidth)
				show_clientbandwidth
				;;
			traffic)
				show_traffic
				;;
			modem)
				show_modem
				;;
			modemsettings)
				show_modemsettings
				;;
			modeminfo)
				show_modeminfo
				;;
			setsimslot)
				setsimslot
				;;
			ussd)
				show_ussd
				;;
			ussdshortcuts)
				show_ussdshortcuts
				;;
			sms)
				show_sms
				;;
			queries)
				show_queries
				;;
			wifiscan)
				show_wifiscan
				;;
			detect_wan)
				detect_wan
				;;
			pincode)
				pincode
				;;
			reboot)
				reboot
				;;
			upgrade)
				upgrade
				;;
			vpn)
				show_vpn
				;;
			vpnstatus)
				show_vpn_status
				;;
			vpnstatuszerotier)
				show_vpn_status_zerotier
				;;
			vpndetails)
				show_vpn_details
				;;
			getwireguardkeys)
				get_wireguard_keys
				;;
			geolocation)
				show_geolocation
				;;
			adblock)
				show_adblock
				;;
			nightmode)
				show_nightmode
				;;
			leds)
				leds
				;;
			wol)
				show_wol
				;;
			wolwakeup)
				wolwakeup
				;;
		esac
	;;
esac

exit 0
